"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("src_App_tsx",{

/***/ "./src/game/components/Match.ts":
/*!**************************************!*\
  !*** ./src/game/components/Match.ts ***!
  \**************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ Match; }\n/* harmony export */ });\nclass Gem {\n}\nclass Match {\n    drawField() {\n        this.gameArray = [];\n        this.poolArray = [];\n        this.gemGroup = this.scene.add.group();\n        for(let i = 0; i < this.fieldSize; i++){\n            this.gameArray[i] = [];\n            for(let j = 0; j < this.fieldSize; j++){\n                let color = this.randomColor();\n                let gem = this.scene.add.sprite(this.gemSize * j + this.gemSize / 2, this.gemSize * i + this.gemSize / 2, color);\n                this.gemGroup.add(gem);\n                this.gameArray[i][j] = {\n                    gemColor: color,\n                    gemSprite: gem,\n                    isEmpty: false\n                };\n            }\n        }\n    }\n    isMatch(row, col) {\n        return this.isHorizontalMatch(row, col) || this.isVerticalMatch(row, col);\n    }\n    isHorizontalMatch(row, col) {\n        return this.gemAt(row, col).gemColor == this.gemAt(row, col - 1).gemColor && this.gemAt(row, col).gemColor == this.gemAt(row, col - 2).gemColor;\n    }\n    isVerticalMatch(row, col) {\n        return this.gemAt(row, col).gemColor == this.gemAt(row - 1, col).gemColor && this.gemAt(row, col).gemColor == this.gemAt(row - 2, col).gemColor;\n    }\n    gemAt(row, col) {\n        if (row < 0 || row >= this.fieldSize || col < 0 || col >= this.fieldSize) {\n            return -1;\n        }\n        return this.gameArray[row][col];\n    }\n    gemSelect(pointer) {\n        if (this.canPick) {\n            this.dragging = true;\n            let row = Math.floor(pointer.y / this.gemSize);\n            let col = Math.floor(pointer.x / this.gemSize);\n            let pickedGem = this.gemAt(row, col);\n            if (pickedGem != -1) {\n                if (this.selectedGem == null) {\n                    pickedGem.gemSprite.setScale(1.2);\n                    pickedGem.gemSprite.setDepth(1);\n                    this.selectedGem = pickedGem;\n                } else {\n                    if (this.areTheSame(pickedGem, this.selectedGem)) {\n                        this.selectedGem.gemSprite.setScale(1);\n                        this.selectedGem = null;\n                    } else {\n                        if (this.areNext(pickedGem, this.selectedGem)) {\n                            this.selectedGem.gemSprite.setScale(1);\n                            this.swapGems(this.selectedGem, pickedGem, true);\n                        } else {\n                            this.selectedGem.gemSprite.setScale(1);\n                            pickedGem.gemSprite.setScale(1.2);\n                            this.selectedGem = pickedGem;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    startSwipe(pointer) {\n        if (this.dragging && this.selectedGem != null) {\n            let deltaX = pointer.downX - pointer.x;\n            let deltaY = pointer.downY - pointer.y;\n            let deltaRow = 0;\n            let deltaCol = 0;\n            if (deltaX > this.gemSize / 2 && Math.abs(deltaY) < this.gemSize / 4) {\n                deltaCol = -1;\n            }\n            if (deltaX < -this.gemSize / 2 && Math.abs(deltaY) < this.gemSize / 4) {\n                deltaCol = 1;\n            }\n            if (deltaY > this.gemSize / 2 && Math.abs(deltaX) < this.gemSize / 4) {\n                deltaRow = -1;\n            }\n            if (deltaY < -this.gemSize / 2 && Math.abs(deltaX) < this.gemSize / 4) {\n                deltaRow = 1;\n            }\n            if (deltaRow + deltaCol != 0) {\n                let pickedGem = this.gemAt(this.getGemRow(this.selectedGem) + deltaRow, this.getGemCol(this.selectedGem) + deltaCol);\n                if (pickedGem != -1) {\n                    this.selectedGem.gemSprite.setScale(1);\n                    this.swapGems(this.selectedGem, pickedGem, true);\n                    this.dragging = false;\n                }\n            }\n        }\n    }\n    stopSwipe() {\n        this.dragging = false;\n    }\n    areTheSame(gem1, gem2) {\n        return this.getGemRow(gem1) == this.getGemRow(gem2) && this.getGemCol(gem1) == this.getGemCol(gem2);\n    }\n    getGemRow(gem) {\n        return Math.floor(gem.gemSprite.y / this.gemSize);\n    }\n    getGemCol(gem) {\n        return Math.floor(gem.gemSprite.x / this.gemSize);\n    }\n    areNext(gem1, gem2) {\n        return Math.abs(this.getGemRow(gem1) - this.getGemRow(gem2)) + Math.abs(this.getGemCol(gem1) - this.getGemCol(gem2)) == 1;\n    }\n    swapGems(gem1, gem2, swapBack) {\n        this.swappingGems = 2;\n        this.canPick = false;\n        let fromColor = gem1.gemColor;\n        let fromSprite = gem1.gemSprite;\n        let toColor = gem2.gemColor;\n        let toSprite = gem2.gemSprite;\n        let gem1Row = this.getGemRow(gem1);\n        let gem1Col = this.getGemCol(gem1);\n        let gem2Row = this.getGemRow(gem2);\n        let gem2Col = this.getGemCol(gem2);\n        this.gameArray[gem1Row][gem1Col].gemColor = toColor;\n        this.gameArray[gem1Row][gem1Col].gemSprite = toSprite;\n        this.gameArray[gem2Row][gem2Col].gemColor = fromColor;\n        this.gameArray[gem2Row][gem2Col].gemSprite = fromSprite;\n        this.tweenGem(gem1, gem2, swapBack);\n        this.tweenGem(gem2, gem1, swapBack);\n    }\n    tweenGem(gem1, gem2, swapBack) {\n        let row = this.getGemRow(gem1);\n        let col = this.getGemCol(gem1);\n        this.scene.tweens.add({\n            targets: this.gameArray[row][col].gemSprite,\n            x: col * this.gemSize + this.gemSize / 2,\n            y: row * this.gemSize + this.gemSize / 2,\n            duration: this.swapSpeed,\n            callbackScope: this,\n            onComplete: function() {\n                this.swappingGems--;\n                if (this.swappingGems == 0) {\n                    if (!this.matchInBoard() && swapBack) {\n                        this.swapGems(gem1, gem2, false);\n                    } else {\n                        if (this.matchInBoard()) {\n                            this.handleMatches();\n                        } else {\n                            this.canPick = true;\n                            this.selectedGem = null;\n                        }\n                    }\n                }\n            }\n        });\n    }\n    matchInBoard() {\n        for(let i = 0; i < this.fieldSize; i++){\n            for(let j = 0; j < this.fieldSize; j++){\n                if (this.isMatch(i, j)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    handleMatches() {\n        this.removeMap = [];\n        for(let i = 0; i < this.fieldSize; i++){\n            this.removeMap[i] = [];\n            for(let j = 0; j < this.fieldSize; j++){\n                this.removeMap[i].push(0);\n            }\n        }\n        this.markMatches(\"horizontal\");\n        this.markMatches(\"vertical\");\n        this.destroyGems();\n    }\n    markMatches(direction) {\n        for(let i = 0; i < this.fieldSize; i++){\n            let colorStreak = 1;\n            let currentColor = -1;\n            let startStreak = 0;\n            let colorToWatch = 0;\n            for(let j = 0; j < this.fieldSize; j++){\n                if (direction == \"horizontal\") {\n                    colorToWatch = this.gemAt(i, j).gemColor;\n                } else {\n                    colorToWatch = this.gemAt(j, i).gemColor;\n                }\n                if (colorToWatch == currentColor) {\n                    colorStreak++;\n                }\n                if (colorToWatch != currentColor || j == this.fieldSize - 1) {\n                    if (colorStreak >= 3) {\n                        if (direction == \"horizontal\") {\n                            console.log(\"HORIZONTAL :: Length = \" + colorStreak + \" :: Start = (\" + i + \",\" + startStreak + \") :: Color = \" + currentColor);\n                        } else {\n                            console.log(\"VERTICAL :: Length = \" + colorStreak + \" :: Start = (\" + startStreak + \",\" + i + \") :: Color = \" + currentColor);\n                        }\n                        for(let k = 0; k < colorStreak; k++){\n                            if (direction == \"horizontal\") {\n                                this.removeMap[i][startStreak + k]++;\n                            } else {\n                                this.removeMap[startStreak + k][i]++;\n                            }\n                        }\n                    }\n                    startStreak = j;\n                    colorStreak = 1;\n                    currentColor = colorToWatch;\n                }\n            }\n        }\n    }\n    destroyGems() {\n        let destroyed = 0;\n        for(let i = 0; i < this.fieldSize; i++){\n            for(let j = 0; j < this.fieldSize; j++){\n                if (this.removeMap[i][j] > 0) {\n                    destroyed++;\n                    this.scene.tweens.add({\n                        targets: this.gameArray[i][j].gemSprite,\n                        alpha: 0.5,\n                        duration: this.destroySpeed,\n                        callbackScope: this,\n                        onComplete: function() {\n                            destroyed--;\n                            this.gameArray[i][j].gemSprite.visible = false;\n                            this.poolArray.push(this.gameArray[i][j].gemSprite);\n                            if (destroyed == 0) {\n                                this.makeGemsFall();\n                                this.replenishField();\n                            }\n                        }\n                    });\n                    this.gameArray[i][j].isEmpty = true;\n                }\n            }\n        }\n    }\n    makeGemsFall() {\n        for(let i = this.fieldSize - 2; i >= 0; i--){\n            for(let j = 0; j < this.fieldSize; j++){\n                if (!this.gameArray[i][j].isEmpty) {\n                    let fallTiles = this.holesBelow(i, j);\n                    if (fallTiles > 0) {\n                        this.scene.tweens.add({\n                            targets: this.gameArray[i][j].gemSprite,\n                            y: this.gameArray[i][j].gemSprite.y + fallTiles * this.gemSize,\n                            duration: this.fallSpeed * fallTiles\n                        });\n                        this.gameArray[i + fallTiles][j] = {\n                            gemSprite: this.gameArray[i][j].gemSprite,\n                            gemColor: this.gameArray[i][j].gemColor,\n                            isEmpty: false\n                        };\n                        this.gameArray[i][j].isEmpty = true;\n                    }\n                }\n            }\n        }\n    }\n    holesBelow(row, col) {\n        let result = 0;\n        for(let i = row + 1; i < this.fieldSize; i++){\n            if (this.gameArray[i][col].isEmpty) {\n                result++;\n            }\n        }\n        return result;\n    }\n    replenishField() {\n        let replenished = 0;\n        for(let j = 0; j < this.fieldSize; j++){\n            let emptySpots = this.holesInCol(j);\n            if (emptySpots > 0) {\n                for(let i = 0; i < emptySpots; i++){\n                    replenished++;\n                    let randomColor = this.randomColor();\n                    this.gameArray[i][j].gemColor = randomColor;\n                    this.gameArray[i][j].gemSprite = this.poolArray.pop();\n                    this.gameArray[i][j].gemSprite.setTexture(randomColor);\n                    this.gameArray[i][j].gemSprite.visible = true;\n                    this.gameArray[i][j].gemSprite.x = this.gemSize * j + this.gemSize / 2;\n                    this.gameArray[i][j].gemSprite.y = this.gemSize / 2 - (emptySpots - i) * this.gemSize;\n                    this.gameArray[i][j].gemSprite.alpha = 1;\n                    this.gameArray[i][j].isEmpty = false;\n                    this.scene.tweens.add({\n                        targets: this.gameArray[i][j].gemSprite,\n                        y: this.gemSize * i + this.gemSize / 2,\n                        duration: this.fallSpeed * emptySpots,\n                        callbackScope: this,\n                        onComplete: function() {\n                            replenished--;\n                            if (replenished == 0) {\n                                if (this.matchInBoard()) {\n                                    this.time.addEvent({\n                                        delay: 250,\n                                        callback: this.handleMatches()\n                                    });\n                                } else {\n                                    this.canPick = true;\n                                    this.selectedGem = null;\n                                }\n                            }\n                        }\n                    });\n                }\n            }\n        }\n    }\n    holesInCol(col) {\n        var result = 0;\n        for(let i = 0; i < this.fieldSize; i++){\n            if (this.gameArray[i][col].isEmpty) {\n                result++;\n            }\n        }\n        return result;\n    }\n    randomColor() {\n        return this.gemColors[Phaser.Math.Between(0, this.gemColors.length - 1)];\n    }\n    constructor(scene){\n        //\n        this.fieldSize = 7;\n        this.gemSize = 128;\n        this.swapSpeed = 200;\n        this.fallSpeed = 100;\n        this.destroySpeed = 200;\n        this.gemColors = [\n            \"blue\",\n            \"green\",\n            \"orange\",\n            \"red\"\n        ];\n        //\n        this.canPick = true;\n        this.dragging = false;\n        //\n        this.gameArray = [];\n        this.poolArray = [];\n        this.scene = scene;\n        this.drawField();\n        this.scene.input.on(\"pointerdown\", this.gemSelect, this);\n        this.scene.input.on(\"pointermove\", this.startSwipe, this);\n        this.scene.input.on(\"pointerup\", this.stopSwipe, this);\n    }\n}\n\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LFVBQW1CO2FBQ25CQyxXQUFvQjtRQUNwQixFQUFFO2FBQ0YxQixZQUFpQixFQUFFO2FBQ25CQyxZQUFpQixFQUFFO1FBUWYsSUFBSSxDQUFDRSxLQUFLLEdBQUdBO1FBRWIsSUFBSSxDQUFDSixTQUFTO1FBRWQsSUFBSSxDQUFDSSxLQUFLLENBQUN1RyxLQUFLLENBQUNDLEVBQUUsQ0FBQyxlQUFlLElBQUksQ0FBQ3BGLFNBQVMsRUFBRSxJQUFJO1FBQ3ZELElBQUksQ0FBQ3BCLEtBQUssQ0FBQ3VHLEtBQUssQ0FBQ0MsRUFBRSxDQUFDLGVBQWUsSUFBSSxDQUFDckUsVUFBVSxFQUFFLElBQUk7UUFDeEQsSUFBSSxDQUFDbkMsS0FBSyxDQUFDdUcsS0FBSyxDQUFDQyxFQUFFLENBQUMsYUFBYSxJQUFJLENBQUMzRCxTQUFTLEVBQUUsSUFBSTtJQUN6RDtBQStWSjtBQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL3NyYy9nYW1lL2NvbXBvbmVudHMvTWF0Y2gudHM/ODZhMiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBHYW1lLCBHYW1lT2JqZWN0cywgU2NlbmUgfSBmcm9tIFwicGhhc2VyXCI7XG5cbmNsYXNzIEdlbXtcbiAgICBnZW1Db2xvcjogc3RyaW5nXG4gICAgZ2VtU3ByaXRlOiBHYW1lT2JqZWN0cy5TcHJpdGVcbiAgICBpc0VtcHR5OiBib29sZWFuXG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1hdGNoe1xuXG4gICAgc2NlbmU6IFBoYXNlci5TY2VuZVxuICAgIC8vXG4gICAgZmllbGRTaXplOiBudW1iZXIgPSA3XG4gICAgZ2VtU2l6ZTogbnVtYmVyID0gMTI4XG4gICAgc3dhcFNwZWVkOiBudW1iZXIgPSAyMDBcbiAgICBmYWxsU3BlZWQ6IG51bWJlciA9IDEwMFxuICAgIGRlc3Ryb3lTcGVlZDogbnVtYmVyID0gMjAwXG4gICAgZ2VtQ29sb3JzOiBzdHJpbmdbXSA9IFsnYmx1ZScsJ2dyZWVuJywnb3JhbmdlJywncmVkJ11cbiAgICAvL1xuICAgIGNhblBpY2s6IGJvb2xlYW4gPSB0cnVlXG4gICAgZHJhZ2dpbmc6IGJvb2xlYW4gPSBmYWxzZVxuICAgIC8vXG4gICAgZ2FtZUFycmF5OiBhbnkgPSBbXVxuICAgIHBvb2xBcnJheTogYW55ID0gW11cbiAgICBnZW1Hcm91cDogR2FtZU9iamVjdHMuR3JvdXBcbiAgICAvL1xuICAgIHNlbGVjdGVkR2VtOiBHZW0gfCBudWxsXG4gICAgc3dhcHBpbmdHZW1zOiBudW1iZXJcbiAgICByZW1vdmVNYXA6IGFueVxuXG4gICAgY29uc3RydWN0b3Ioc2NlbmU6U2NlbmUpe1xuICAgICAgICB0aGlzLnNjZW5lID0gc2NlbmVcblxuICAgICAgICB0aGlzLmRyYXdGaWVsZCgpO1xuXG4gICAgICAgIHRoaXMuc2NlbmUuaW5wdXQub24oXCJwb2ludGVyZG93blwiLCB0aGlzLmdlbVNlbGVjdCwgdGhpcyk7XG4gICAgICAgIHRoaXMuc2NlbmUuaW5wdXQub24oXCJwb2ludGVybW92ZVwiLCB0aGlzLnN0YXJ0U3dpcGUsIHRoaXMpO1xuICAgICAgICB0aGlzLnNjZW5lLmlucHV0Lm9uKFwicG9pbnRlcnVwXCIsIHRoaXMuc3RvcFN3aXBlLCB0aGlzKTtcbiAgICB9XG5cbiAgICBkcmF3RmllbGQoKXtcbiAgICAgICAgdGhpcy5nYW1lQXJyYXkgPSBbXTtcbiAgICAgICAgdGhpcy5wb29sQXJyYXkgPSBbXTtcbiAgICAgICAgdGhpcy5nZW1Hcm91cCA9IHRoaXMuc2NlbmUuYWRkLmdyb3VwKCk7XG4gICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCB0aGlzLmZpZWxkU2l6ZTsgaSArKyl7XG4gICAgICAgICAgICB0aGlzLmdhbWVBcnJheVtpXSA9IFtdO1xuICAgICAgICAgICAgZm9yKGxldCBqID0gMDsgaiA8IHRoaXMuZmllbGRTaXplOyBqICsrKXtcbiAgICAgICAgICAgICAgICBsZXQgY29sb3IgPSB0aGlzLnJhbmRvbUNvbG9yKClcbiAgICAgICAgICAgICAgICBsZXQgZ2VtID0gdGhpcy5zY2VuZS5hZGQuc3ByaXRlKHRoaXMuZ2VtU2l6ZSAqIGogKyB0aGlzLmdlbVNpemUgLyAyLCB0aGlzLmdlbVNpemUgKiBpICsgdGhpcy5nZW1TaXplIC8gMiwgY29sb3IpO1xuICAgICAgICAgICAgICAgIHRoaXMuZ2VtR3JvdXAuYWRkKGdlbSk7XG5cbiAgICAgICAgICAgICAgICB0aGlzLmdhbWVBcnJheVtpXVtqXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgZ2VtQ29sb3I6IGNvbG9yLFxuICAgICAgICAgICAgICAgICAgICBnZW1TcHJpdGU6IGdlbSxcbiAgICAgICAgICAgICAgICAgICAgaXNFbXB0eTogZmFsc2VcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpc01hdGNoKHJvdzpudW1iZXIsIGNvbDpudW1iZXIpOiBib29sZWFue1xuICAgICAgICByZXR1cm4gdGhpcy5pc0hvcml6b250YWxNYXRjaChyb3csIGNvbCkgfHwgdGhpcy5pc1ZlcnRpY2FsTWF0Y2gocm93LCBjb2wpO1xuICAgIH1cblxuICAgIGlzSG9yaXpvbnRhbE1hdGNoKHJvdzogbnVtYmVyLCBjb2w6IG51bWJlcik6IGJvb2xlYW57XG4gICAgICAgIHJldHVybiB0aGlzLmdlbUF0KHJvdywgY29sKS5nZW1Db2xvciA9PSB0aGlzLmdlbUF0KHJvdywgY29sIC0gMSkuZ2VtQ29sb3IgJiYgdGhpcy5nZW1BdChyb3csIGNvbCkuZ2VtQ29sb3IgPT0gdGhpcy5nZW1BdChyb3csIGNvbCAtIDIpLmdlbUNvbG9yO1xuICAgIH1cblxuICAgIGlzVmVydGljYWxNYXRjaChyb3c6IG51bWJlciwgY29sOiBudW1iZXIpOiBib29sZWFue1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2VtQXQocm93LCBjb2wpLmdlbUNvbG9yID09IHRoaXMuZ2VtQXQocm93IC0gMSwgY29sKS5nZW1Db2xvciAmJiB0aGlzLmdlbUF0KHJvdywgY29sKS5nZW1Db2xvciA9PSB0aGlzLmdlbUF0KHJvdyAtIDIsIGNvbCkuZ2VtQ29sb3I7XG4gICAgfVxuICAgIFxuICAgIGdlbUF0KHJvdzogbnVtYmVyLCBjb2w6IG51bWJlcik6IGFueXtcbiAgICAgICAgaWYocm93IDwgMCB8fCByb3cgPj0gdGhpcy5maWVsZFNpemUgfHwgY29sIDwgMCB8fCBjb2wgPj0gdGhpcy5maWVsZFNpemUpe1xuICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmdhbWVBcnJheVtyb3ddW2NvbF07XG4gICAgfVxuXG4gICAgZ2VtU2VsZWN0KHBvaW50ZXI6IFBoYXNlci5JbnB1dC5Qb2ludGVyKXtcbiAgICAgICAgaWYodGhpcy5jYW5QaWNrKXtcbiAgICAgICAgICAgIHRoaXMuZHJhZ2dpbmcgPSB0cnVlO1xuICAgICAgICAgICAgbGV0IHJvdyA9IE1hdGguZmxvb3IocG9pbnRlci55IC8gdGhpcy5nZW1TaXplKTtcbiAgICAgICAgICAgIGxldCBjb2wgPSBNYXRoLmZsb29yKHBvaW50ZXIueCAvIHRoaXMuZ2VtU2l6ZSk7XG4gICAgICAgICAgICBsZXQgcGlja2VkR2VtID0gdGhpcy5nZW1BdChyb3csIGNvbClcbiAgICAgICAgICAgIGlmKHBpY2tlZEdlbSAhPSAtMSl7XG4gICAgICAgICAgICAgICAgaWYodGhpcy5zZWxlY3RlZEdlbSA9PSBudWxsKXtcbiAgICAgICAgICAgICAgICAgICAgcGlja2VkR2VtLmdlbVNwcml0ZS5zZXRTY2FsZSgxLjIpO1xuICAgICAgICAgICAgICAgICAgICBwaWNrZWRHZW0uZ2VtU3ByaXRlLnNldERlcHRoKDEpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkR2VtID0gcGlja2VkR2VtO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgICAgICBpZih0aGlzLmFyZVRoZVNhbWUocGlja2VkR2VtLCB0aGlzLnNlbGVjdGVkR2VtKSl7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkR2VtLmdlbVNwcml0ZS5zZXRTY2FsZSgxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRHZW0gPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZih0aGlzLmFyZU5leHQocGlja2VkR2VtLCB0aGlzLnNlbGVjdGVkR2VtKSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZEdlbS5nZW1TcHJpdGUuc2V0U2NhbGUoMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zd2FwR2Vtcyh0aGlzLnNlbGVjdGVkR2VtLCBwaWNrZWRHZW0sIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkR2VtLmdlbVNwcml0ZS5zZXRTY2FsZSgxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwaWNrZWRHZW0uZ2VtU3ByaXRlLnNldFNjYWxlKDEuMik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZEdlbSA9IHBpY2tlZEdlbTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHN0YXJ0U3dpcGUocG9pbnRlcjogUGhhc2VyLklucHV0LlBvaW50ZXIpe1xuICAgICAgICBpZih0aGlzLmRyYWdnaW5nICYmIHRoaXMuc2VsZWN0ZWRHZW0gIT0gbnVsbCl7XG4gICAgICAgICAgICBsZXQgZGVsdGFYID0gcG9pbnRlci5kb3duWCAtIHBvaW50ZXIueDtcbiAgICAgICAgICAgIGxldCBkZWx0YVkgPSBwb2ludGVyLmRvd25ZIC0gcG9pbnRlci55O1xuICAgICAgICAgICAgbGV0IGRlbHRhUm93ID0gMDtcbiAgICAgICAgICAgIGxldCBkZWx0YUNvbCA9IDA7XG4gICAgICAgICAgICBpZihkZWx0YVggPiB0aGlzLmdlbVNpemUgLyAyICYmIE1hdGguYWJzKGRlbHRhWSkgPCB0aGlzLmdlbVNpemUgLyA0KXtcbiAgICAgICAgICAgICAgICBkZWx0YUNvbCA9IC0xO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYoZGVsdGFYIDwgLXRoaXMuZ2VtU2l6ZSAvIDIgJiYgTWF0aC5hYnMoZGVsdGFZKSA8IHRoaXMuZ2VtU2l6ZSAvIDQpe1xuICAgICAgICAgICAgICAgIGRlbHRhQ29sID0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmKGRlbHRhWSA+IHRoaXMuZ2VtU2l6ZSAvIDIgJiYgTWF0aC5hYnMoZGVsdGFYKSA8IHRoaXMuZ2VtU2l6ZSAvIDQpe1xuICAgICAgICAgICAgICAgIGRlbHRhUm93ID0gLTE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZihkZWx0YVkgPCAtdGhpcy5nZW1TaXplIC8gMiAmJiBNYXRoLmFicyhkZWx0YVgpIDwgdGhpcy5nZW1TaXplIC8gNCl7XG4gICAgICAgICAgICAgICAgZGVsdGFSb3cgPSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYoZGVsdGFSb3cgKyBkZWx0YUNvbCAhPSAwKXtcbiAgICAgICAgICAgICAgICBsZXQgcGlja2VkR2VtID0gdGhpcy5nZW1BdCh0aGlzLmdldEdlbVJvdyh0aGlzLnNlbGVjdGVkR2VtKSArIGRlbHRhUm93LCB0aGlzLmdldEdlbUNvbCh0aGlzLnNlbGVjdGVkR2VtKSArIGRlbHRhQ29sKTtcbiAgICAgICAgICAgICAgICBpZihwaWNrZWRHZW0gIT0gLTEpe1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkR2VtLmdlbVNwcml0ZS5zZXRTY2FsZSgxKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zd2FwR2Vtcyh0aGlzLnNlbGVjdGVkR2VtLCBwaWNrZWRHZW0sIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRyYWdnaW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgc3RvcFN3aXBlKCl7XG4gICAgICAgIHRoaXMuZHJhZ2dpbmcgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBhcmVUaGVTYW1lKGdlbTE6IEdlbSwgZ2VtMjogR2VtKXtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0R2VtUm93KGdlbTEpID09IHRoaXMuZ2V0R2VtUm93KGdlbTIpICYmIHRoaXMuZ2V0R2VtQ29sKGdlbTEpID09IHRoaXMuZ2V0R2VtQ29sKGdlbTIpO1xuICAgIH1cblxuICAgIGdldEdlbVJvdyhnZW06IEdlbSl7XG4gICAgICAgIHJldHVybiBNYXRoLmZsb29yKGdlbS5nZW1TcHJpdGUueSAvIHRoaXMuZ2VtU2l6ZSk7XG4gICAgfVxuXG4gICAgZ2V0R2VtQ29sKGdlbTogR2VtKXtcbiAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IoZ2VtLmdlbVNwcml0ZS54IC8gdGhpcy5nZW1TaXplKTtcbiAgICB9XG5cbiAgICBhcmVOZXh0KGdlbTE6IEdlbSwgZ2VtMjogR2VtKXtcbiAgICAgICAgcmV0dXJuIE1hdGguYWJzKHRoaXMuZ2V0R2VtUm93KGdlbTEpIC0gdGhpcy5nZXRHZW1Sb3coZ2VtMikpICsgTWF0aC5hYnModGhpcy5nZXRHZW1Db2woZ2VtMSkgLSB0aGlzLmdldEdlbUNvbChnZW0yKSkgPT0gMTtcbiAgICB9XG5cbiAgICBzd2FwR2VtcyhnZW0xOiBHZW0sIGdlbTI6IEdlbSwgc3dhcEJhY2s6IGJvb2xlYW4pe1xuICAgICAgICB0aGlzLnN3YXBwaW5nR2VtcyA9IDI7XG4gICAgICAgIHRoaXMuY2FuUGljayA9IGZhbHNlO1xuICAgICAgICBsZXQgZnJvbUNvbG9yID0gZ2VtMS5nZW1Db2xvcjtcbiAgICAgICAgbGV0IGZyb21TcHJpdGUgPSBnZW0xLmdlbVNwcml0ZTtcbiAgICAgICAgbGV0IHRvQ29sb3IgPSBnZW0yLmdlbUNvbG9yO1xuICAgICAgICBsZXQgdG9TcHJpdGUgPSBnZW0yLmdlbVNwcml0ZTtcbiAgICAgICAgbGV0IGdlbTFSb3cgPSB0aGlzLmdldEdlbVJvdyhnZW0xKTtcbiAgICAgICAgbGV0IGdlbTFDb2wgPSB0aGlzLmdldEdlbUNvbChnZW0xKTtcbiAgICAgICAgbGV0IGdlbTJSb3cgPSB0aGlzLmdldEdlbVJvdyhnZW0yKTtcbiAgICAgICAgbGV0IGdlbTJDb2wgPSB0aGlzLmdldEdlbUNvbChnZW0yKTtcbiAgICAgICAgdGhpcy5nYW1lQXJyYXlbZ2VtMVJvd11bZ2VtMUNvbF0uZ2VtQ29sb3IgPSB0b0NvbG9yO1xuICAgICAgICB0aGlzLmdhbWVBcnJheVtnZW0xUm93XVtnZW0xQ29sXS5nZW1TcHJpdGUgPSB0b1Nwcml0ZTtcbiAgICAgICAgdGhpcy5nYW1lQXJyYXlbZ2VtMlJvd11bZ2VtMkNvbF0uZ2VtQ29sb3IgPSBmcm9tQ29sb3I7XG4gICAgICAgIHRoaXMuZ2FtZUFycmF5W2dlbTJSb3ddW2dlbTJDb2xdLmdlbVNwcml0ZSA9IGZyb21TcHJpdGU7XG4gICAgICAgIHRoaXMudHdlZW5HZW0oZ2VtMSwgZ2VtMiwgc3dhcEJhY2spO1xuICAgICAgICB0aGlzLnR3ZWVuR2VtKGdlbTIsIGdlbTEsIHN3YXBCYWNrKTtcbiAgICB9XG5cbiAgICB0d2VlbkdlbShnZW0xOiBHZW0sIGdlbTI6IEdlbSwgc3dhcEJhY2s6IGJvb2xlYW4pe1xuICAgICAgICBsZXQgcm93ID0gdGhpcy5nZXRHZW1Sb3coZ2VtMSk7XG4gICAgICAgIGxldCBjb2wgPSB0aGlzLmdldEdlbUNvbChnZW0xKTtcbiAgICAgICAgdGhpcy5zY2VuZS50d2VlbnMuYWRkKHtcbiAgICAgICAgICAgIHRhcmdldHM6IHRoaXMuZ2FtZUFycmF5W3Jvd11bY29sXS5nZW1TcHJpdGUsXG4gICAgICAgICAgICB4OiBjb2wgKiB0aGlzLmdlbVNpemUgKyB0aGlzLmdlbVNpemUgLyAyLFxuICAgICAgICAgICAgeTogcm93ICogdGhpcy5nZW1TaXplICsgdGhpcy5nZW1TaXplIC8gMixcbiAgICAgICAgICAgIGR1cmF0aW9uOiB0aGlzLnN3YXBTcGVlZCxcbiAgICAgICAgICAgIGNhbGxiYWNrU2NvcGU6IHRoaXMsXG4gICAgICAgICAgICBvbkNvbXBsZXRlOiBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgIHRoaXMuc3dhcHBpbmdHZW1zIC0tO1xuICAgICAgICAgICAgICAgIGlmKHRoaXMuc3dhcHBpbmdHZW1zID09IDApe1xuICAgICAgICAgICAgICAgICAgICBpZighdGhpcy5tYXRjaEluQm9hcmQoKSAmJiBzd2FwQmFjayl7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN3YXBHZW1zKGdlbTEsIGdlbTIsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYodGhpcy5tYXRjaEluQm9hcmQoKSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVNYXRjaGVzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2FuUGljayA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZEdlbSA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIG1hdGNoSW5Cb2FyZCgpe1xuICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgdGhpcy5maWVsZFNpemU7IGkgKyspe1xuICAgICAgICAgICAgZm9yKGxldCBqID0gMDsgaiA8IHRoaXMuZmllbGRTaXplOyBqICsrKXtcbiAgICAgICAgICAgICAgICBpZih0aGlzLmlzTWF0Y2goaSwgaikpe1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGhhbmRsZU1hdGNoZXMoKXtcbiAgICAgICAgdGhpcy5yZW1vdmVNYXAgPSBbXTtcbiAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IHRoaXMuZmllbGRTaXplOyBpICsrKXtcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlTWFwW2ldID0gW107XG4gICAgICAgICAgICBmb3IobGV0IGogPSAwOyBqIDwgdGhpcy5maWVsZFNpemU7IGogKyspe1xuICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlTWFwW2ldLnB1c2goMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5tYXJrTWF0Y2hlcygnaG9yaXpvbnRhbCcpO1xuICAgICAgICB0aGlzLm1hcmtNYXRjaGVzKCd2ZXJ0aWNhbCcpO1xuICAgICAgICB0aGlzLmRlc3Ryb3lHZW1zKCk7XG4gICAgfVxuXG4gICAgbWFya01hdGNoZXMoZGlyZWN0aW9uOiBzdHJpbmcpe1xuICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgdGhpcy5maWVsZFNpemU7IGkgKyspe1xuICAgICAgICAgICAgbGV0IGNvbG9yU3RyZWFrID0gMTtcbiAgICAgICAgICAgIGxldCBjdXJyZW50Q29sb3IgPSAtMTtcbiAgICAgICAgICAgIGxldCBzdGFydFN0cmVhayA9IDA7XG4gICAgICAgICAgICBsZXQgY29sb3JUb1dhdGNoID0gMDtcbiAgICAgICAgICAgIGZvcihsZXQgaiA9IDA7IGogPCB0aGlzLmZpZWxkU2l6ZTsgaiArKyl7XG4gICAgICAgICAgICAgICAgaWYoZGlyZWN0aW9uID09ICdob3Jpem9udGFsJyl7XG4gICAgICAgICAgICAgICAgICAgIGNvbG9yVG9XYXRjaCA9IHRoaXMuZ2VtQXQoaSwgaikuZ2VtQ29sb3I7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICAgICAgICAgIGNvbG9yVG9XYXRjaCA9IHRoaXMuZ2VtQXQoaiwgaSkuZ2VtQ29sb3I7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmKGNvbG9yVG9XYXRjaCA9PSBjdXJyZW50Q29sb3Ipe1xuICAgICAgICAgICAgICAgICAgICBjb2xvclN0cmVhayArKztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYoY29sb3JUb1dhdGNoICE9IGN1cnJlbnRDb2xvciB8fCBqID09IHRoaXMuZmllbGRTaXplIC0gMSl7XG4gICAgICAgICAgICAgICAgICAgIGlmKGNvbG9yU3RyZWFrID49IDMpe1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYoZGlyZWN0aW9uID09ICdob3Jpem9udGFsJyl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJIT1JJWk9OVEFMIDo6IExlbmd0aCA9IFwiICsgY29sb3JTdHJlYWsgKyBcIiA6OiBTdGFydCA9IChcIiArIGkgKyBcIixcIiArIHN0YXJ0U3RyZWFrICsgXCIpIDo6IENvbG9yID0gXCIgKyBjdXJyZW50Q29sb3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIlZFUlRJQ0FMIDo6IExlbmd0aCA9IFwiICsgY29sb3JTdHJlYWsgKyBcIiA6OiBTdGFydCA9IChcIiArIHN0YXJ0U3RyZWFrICsgXCIsXCIgKyBpICsgXCIpIDo6IENvbG9yID0gXCIgKyBjdXJyZW50Q29sb3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yKGxldCBrID0gMDsgayA8IGNvbG9yU3RyZWFrOyBrICsrKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihkaXJlY3Rpb24gPT0gJ2hvcml6b250YWwnKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVNYXBbaV1bc3RhcnRTdHJlYWsgKyBrXSArKztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVNYXBbc3RhcnRTdHJlYWsgKyBrXVtpXSArKztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgc3RhcnRTdHJlYWsgPSBqO1xuICAgICAgICAgICAgICAgICAgICBjb2xvclN0cmVhayA9IDE7XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRDb2xvciA9IGNvbG9yVG9XYXRjaDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBkZXN0cm95R2Vtcygpe1xuICAgICAgICBsZXQgZGVzdHJveWVkID0gMDtcbiAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IHRoaXMuZmllbGRTaXplOyBpICsrKXtcbiAgICAgICAgICAgIGZvcihsZXQgaiA9IDA7IGogPCB0aGlzLmZpZWxkU2l6ZTsgaiArKyl7XG4gICAgICAgICAgICAgICAgaWYodGhpcy5yZW1vdmVNYXBbaV1bal0gPiAwKXtcbiAgICAgICAgICAgICAgICAgICAgZGVzdHJveWVkICsrO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNjZW5lLnR3ZWVucy5hZGQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0czogdGhpcy5nYW1lQXJyYXlbaV1bal0uZ2VtU3ByaXRlLFxuICAgICAgICAgICAgICAgICAgICAgICAgYWxwaGE6IDAuNSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uOiB0aGlzLmRlc3Ryb3lTcGVlZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrU2NvcGU6IHRoaXMsXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNvbXBsZXRlOiBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc3Ryb3llZCAtLTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmdhbWVBcnJheVtpXVtqXS5nZW1TcHJpdGUudmlzaWJsZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucG9vbEFycmF5LnB1c2godGhpcy5nYW1lQXJyYXlbaV1bal0uZ2VtU3ByaXRlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihkZXN0cm95ZWQgPT0gMCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubWFrZUdlbXNGYWxsKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVwbGVuaXNoRmllbGQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmdhbWVBcnJheVtpXVtqXS5pc0VtcHR5ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBtYWtlR2Vtc0ZhbGwoKXtcbiAgICAgICAgZm9yKGxldCBpID0gdGhpcy5maWVsZFNpemUgLSAyOyBpID49IDA7IGkgLS0pe1xuICAgICAgICAgICAgZm9yKGxldCBqID0gMDsgaiA8IHRoaXMuZmllbGRTaXplOyBqICsrKXtcbiAgICAgICAgICAgICAgICBpZighdGhpcy5nYW1lQXJyYXlbaV1bal0uaXNFbXB0eSl7XG4gICAgICAgICAgICAgICAgICAgIGxldCBmYWxsVGlsZXMgPSB0aGlzLmhvbGVzQmVsb3coaSwgaik7XG4gICAgICAgICAgICAgICAgICAgIGlmKGZhbGxUaWxlcyA+IDApe1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zY2VuZS50d2VlbnMuYWRkKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRzOiB0aGlzLmdhbWVBcnJheVtpXVtqXS5nZW1TcHJpdGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeTogdGhpcy5nYW1lQXJyYXlbaV1bal0uZ2VtU3ByaXRlLnkgKyBmYWxsVGlsZXMgKiB0aGlzLmdlbVNpemUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZHVyYXRpb246IHRoaXMuZmFsbFNwZWVkICogZmFsbFRpbGVzXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZ2FtZUFycmF5W2kgKyBmYWxsVGlsZXNdW2pdID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdlbVNwcml0ZTogdGhpcy5nYW1lQXJyYXlbaV1bal0uZ2VtU3ByaXRlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdlbUNvbG9yOiB0aGlzLmdhbWVBcnJheVtpXVtqXS5nZW1Db2xvcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc0VtcHR5OiBmYWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5nYW1lQXJyYXlbaV1bal0uaXNFbXB0eSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBob2xlc0JlbG93KHJvdzogbnVtYmVyLCBjb2w6IG51bWJlcil7XG4gICAgICAgIGxldCByZXN1bHQgPSAwO1xuICAgICAgICBmb3IobGV0IGkgPSByb3cgKyAxOyBpIDwgdGhpcy5maWVsZFNpemU7IGkgKyspe1xuICAgICAgICAgICAgaWYodGhpcy5nYW1lQXJyYXlbaV1bY29sXS5pc0VtcHR5KXtcbiAgICAgICAgICAgICAgICByZXN1bHQgKys7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICByZXBsZW5pc2hGaWVsZCgpe1xuICAgICAgICBsZXQgcmVwbGVuaXNoZWQgPSAwO1xuICAgICAgICBmb3IobGV0IGogPSAwOyBqIDwgdGhpcy5maWVsZFNpemU7IGogKyspe1xuICAgICAgICAgICAgbGV0IGVtcHR5U3BvdHMgPSB0aGlzLmhvbGVzSW5Db2woaik7XG4gICAgICAgICAgICBpZihlbXB0eVNwb3RzID4gMCl7XG4gICAgICAgICAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IGVtcHR5U3BvdHM7IGkgKyspe1xuICAgICAgICAgICAgICAgICAgICByZXBsZW5pc2hlZCArKztcbiAgICAgICAgICAgICAgICAgICAgbGV0IHJhbmRvbUNvbG9yID0gdGhpcy5yYW5kb21Db2xvcigpXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ2FtZUFycmF5W2ldW2pdLmdlbUNvbG9yID0gcmFuZG9tQ29sb3I7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ2FtZUFycmF5W2ldW2pdLmdlbVNwcml0ZSA9IHRoaXMucG9vbEFycmF5LnBvcCgpXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ2FtZUFycmF5W2ldW2pdLmdlbVNwcml0ZS5zZXRUZXh0dXJlKHJhbmRvbUNvbG9yKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5nYW1lQXJyYXlbaV1bal0uZ2VtU3ByaXRlLnZpc2libGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmdhbWVBcnJheVtpXVtqXS5nZW1TcHJpdGUueCA9IHRoaXMuZ2VtU2l6ZSAqIGogKyB0aGlzLmdlbVNpemUgLyAyO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmdhbWVBcnJheVtpXVtqXS5nZW1TcHJpdGUueSA9IHRoaXMuZ2VtU2l6ZSAvIDIgLSAoZW1wdHlTcG90cyAtIGkpICogdGhpcy5nZW1TaXplO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmdhbWVBcnJheVtpXVtqXS5nZW1TcHJpdGUuYWxwaGEgPSAxO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmdhbWVBcnJheVtpXVtqXS5pc0VtcHR5ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2NlbmUudHdlZW5zLmFkZCh7XG4gICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRzOiB0aGlzLmdhbWVBcnJheVtpXVtqXS5nZW1TcHJpdGUsXG4gICAgICAgICAgICAgICAgICAgICAgICB5OiB0aGlzLmdlbVNpemUgKiBpICsgdGhpcy5nZW1TaXplIC8gMixcbiAgICAgICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uOiB0aGlzLmZhbGxTcGVlZCAqIGVtcHR5U3BvdHMsXG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFja1Njb3BlOiB0aGlzLFxuICAgICAgICAgICAgICAgICAgICAgICAgb25Db21wbGV0ZTogZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXBsZW5pc2hlZCAtLTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihyZXBsZW5pc2hlZCA9PSAwKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYodGhpcy5tYXRjaEluQm9hcmQoKSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRpbWUuYWRkRXZlbnQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGF5OiAyNTAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2s6IHRoaXMuaGFuZGxlTWF0Y2hlcygpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jYW5QaWNrID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRHZW0gPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBob2xlc0luQ29sKGNvbDogbnVtYmVyKXtcbiAgICAgICAgdmFyIHJlc3VsdCA9IDA7XG4gICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCB0aGlzLmZpZWxkU2l6ZTsgaSArKyl7XG4gICAgICAgICAgICBpZih0aGlzLmdhbWVBcnJheVtpXVtjb2xdLmlzRW1wdHkpe1xuICAgICAgICAgICAgICAgIHJlc3VsdCArKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIHJhbmRvbUNvbG9yKCk6c3RyaW5ne1xuICAgICAgICByZXR1cm4gdGhpcy5nZW1Db2xvcnNbUGhhc2VyLk1hdGguQmV0d2VlbigwLCB0aGlzLmdlbUNvbG9ycy5sZW5ndGggLSAxKV07XG4gICAgfVxufSJdLCJuYW1lcyI6WyJHZW0iLCJNYXRjaCIsImRyYXdGaWVsZCIsImdhbWVBcnJheSIsInBvb2xBcnJheSIsImdlbUdyb3VwIiwic2NlbmUiLCJhZGQiLCJncm91cCIsImkiLCJmaWVsZFNpemUiLCJqIiwiY29sb3IiLCJyYW5kb21Db2xvciIsImdlbSIsInNwcml0ZSIsImdlbVNpemUiLCJnZW1Db2xvciIsImdlbVNwcml0ZSIsImlzRW1wdHkiLCJpc01hdGNoIiwicm93IiwiY29sIiwiaXNIb3Jpem9udGFsTWF0Y2giLCJpc1ZlcnRpY2FsTWF0Y2giLCJnZW1BdCIsImdlbVNlbGVjdCIsInBvaW50ZXIiLCJjYW5QaWNrIiwiZHJhZ2dpbmciLCJNYXRoIiwiZmxvb3IiLCJ5IiwieCIsInBpY2tlZEdlbSIsInNlbGVjdGVkR2VtIiwic2V0U2NhbGUiLCJzZXREZXB0aCIsImFyZVRoZVNhbWUiLCJhcmVOZXh0Iiwic3dhcEdlbXMiLCJzdGFydFN3aXBlIiwiZGVsdGFYIiwiZG93blgiLCJkZWx0YVkiLCJkb3duWSIsImRlbHRhUm93IiwiZGVsdGFDb2wiLCJhYnMiLCJnZXRHZW1Sb3ciLCJnZXRHZW1Db2wiLCJzdG9wU3dpcGUiLCJnZW0xIiwiZ2VtMiIsInN3YXBCYWNrIiwic3dhcHBpbmdHZW1zIiwiZnJvbUNvbG9yIiwiZnJvbVNwcml0ZSIsInRvQ29sb3IiLCJ0b1Nwcml0ZSIsImdlbTFSb3ciLCJnZW0xQ29sIiwiZ2VtMlJvdyIsImdlbTJDb2wiLCJ0d2VlbkdlbSIsInR3ZWVucyIsInRhcmdldHMiLCJkdXJhdGlvbiIsInN3YXBTcGVlZCIsImNhbGxiYWNrU2NvcGUiLCJvbkNvbXBsZXRlIiwibWF0Y2hJbkJvYXJkIiwiaGFuZGxlTWF0Y2hlcyIsInJlbW92ZU1hcCIsInB1c2giLCJtYXJrTWF0Y2hlcyIsImRlc3Ryb3lHZW1zIiwiZGlyZWN0aW9uIiwiY29sb3JTdHJlYWsiLCJjdXJyZW50Q29sb3IiLCJzdGFydFN0cmVhayIsImNvbG9yVG9XYXRjaCIsImNvbnNvbGUiLCJsb2ciLCJrIiwiZGVzdHJveWVkIiwiYWxwaGEiLCJkZXN0cm95U3BlZWQiLCJ2aXNpYmxlIiwibWFrZUdlbXNGYWxsIiwicmVwbGVuaXNoRmllbGQiLCJmYWxsVGlsZXMiLCJob2xlc0JlbG93IiwiZmFsbFNwZWVkIiwicmVzdWx0IiwicmVwbGVuaXNoZWQiLCJlbXB0eVNwb3RzIiwiaG9sZXNJbkNvbCIsInBvcCIsInNldFRleHR1cmUiLCJ0aW1lIiwiYWRkRXZlbnQiLCJkZWxheSIsImNhbGxiYWNrIiwiZ2VtQ29sb3JzIiwiUGhhc2VyIiwiQmV0d2VlbiIsImxlbmd0aCIsImNvbnN0cnVjdG9yIiwiaW5wdXQiLCJvbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/game/components/Match.ts\n"));

/***/ })

});