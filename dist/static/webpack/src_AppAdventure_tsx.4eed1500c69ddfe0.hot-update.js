"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("src_AppAdventure_tsx",{

/***/ "./src/adventure/components/Map/MapRenderer.ts":
/*!*****************************************************!*\
  !*** ./src/adventure/components/Map/MapRenderer.ts ***!
  \*****************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ MapRenderer; }\n/* harmony export */ });\n/* harmony import */ var _MapEnum__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./MapEnum */ \"./src/adventure/components/Map/MapEnum.ts\");\n/* harmony import */ var _MapEntities__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./MapEntities */ \"./src/adventure/components/Map/MapEntities.ts\");\n/* harmony import */ var _Player_PlayerEnum__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Player/PlayerEnum */ \"./src/adventure/components/Player/PlayerEnum.ts\");\n/* harmony import */ var _adventure_repos_MapLayoutRepo__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/adventure/repos/MapLayoutRepo */ \"./src/adventure/repos/MapLayoutRepo.ts\");\n/* harmony import */ var _adventure_repos_MapRepo__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/adventure/repos/MapRepo */ \"./src/adventure/repos/MapRepo.ts\");\n/* harmony import */ var _Singleton_QuickDebug__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../Singleton/QuickDebug */ \"./src/adventure/components/Singleton/QuickDebug.ts\");\n/* harmony import */ var _MapEnds_Interface_MapEndInterface__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./MapEnds/Interface/MapEndInterface */ \"./src/adventure/components/Map/MapEnds/Interface/MapEndInterface.ts\");\n\n\n\n\n\n\n\nclass MapRenderer {\n    renderMap(mapKey, spawnKey) {\n        const mapData = _adventure_repos_MapRepo__WEBPACK_IMPORTED_MODULE_4__.MapRepo.getMapData(mapKey);\n        if (mapData != undefined) {\n            this.mapData = mapData;\n            if (mapData.layerSkyKey != null) {\n                this.renderSky(mapData.layerSkyKey);\n            }\n            if (mapData.layerBackKey != null) {\n                this.renderBack(mapData.layerBackKey);\n            }\n            this.renderMain(mapData.layerMainKeys);\n            this.renderWallObject();\n            this.renderBackObject(mapData.backEntityList);\n            this.renderFrontObject(mapData.frontEntityList);\n            let spawnX = this.mapData.defaultSpawn;\n            let entryType = \"teleport\";\n            if (spawnKey == undefined || spawnKey == null) {\n                // Check if have left\n                if (mapData.mapStart && mapData.mapStart.key == _MapEnds_Interface_MapEndInterface__WEBPACK_IMPORTED_MODULE_6__.MapEndKey.EXIT) {\n                    // Use left\n                    spawnKey = \"left\";\n                }\n            }\n            if (spawnKey != undefined && spawnKey != null) {\n                // If no spawnKey, use left\n                if (spawnKey == \"left\") {\n                    if (mapData.mapStart && mapData.mapStart.key == _MapEnds_Interface_MapEndInterface__WEBPACK_IMPORTED_MODULE_6__.MapEndKey.EXIT) {\n                        spawnX = 700;\n                        entryType = \"left\";\n                    }\n                } else if (spawnKey == \"right\") {\n                    if (mapData.mapEnd && mapData.mapEnd.key == _MapEnds_Interface_MapEndInterface__WEBPACK_IMPORTED_MODULE_6__.MapEndKey.EXIT) {\n                        spawnX = this.mapLength - 700;\n                        entryType = \"right\";\n                    }\n                } else {\n                    let newSpawnX = this.backMapEntities.getSpawnX(spawnKey);\n                    if (newSpawnX != null) {\n                        spawnX = newSpawnX;\n                        entryType = \"teleport\";\n                    }\n                }\n            }\n            this.currentX = spawnX;\n            this._moveMap();\n        }\n    }\n    renderSky(mapLayoutKey) {\n        // Layer Sky\n        if (mapLayoutKey == null) return;\n        //\n        let textureKey = _adventure_repos_MapLayoutRepo__WEBPACK_IMPORTED_MODULE_3__.MapLayoutRepo.getTextureKey(mapLayoutKey);\n        if (textureKey == null) {\n            this.quickDebug.pushLog(\"MapBase > renderSky() > [\" + mapLayoutKey + \"] not found.\");\n            return;\n        }\n        //\n        let texture = this.scene.textures.get(textureKey);\n        if (texture) {\n            this.skyWidth = texture.getSourceImage().width;\n            //\n            let skyBefore = this.scene.add.sprite(-this.skyWidth, 0, textureKey).setOrigin(0.5, 1);\n            let skyCenter = this.scene.add.sprite(0, 0, textureKey).setOrigin(0.5, 1);\n            let skyAfter = this.scene.add.sprite(this.skyWidth, 0, textureKey).setOrigin(0.5, 1);\n            this.layerSky.add(skyBefore);\n            this.layerSky.add(skyCenter);\n            this.layerSky.add(skyAfter);\n        }\n    }\n    // private renderFar( mapLayoutKey:string ){\n    //     // Layer Far\n    //     let textureKey:string | null = MapLayoutRepo.getTextureKey( mapLayoutKey );\n    //     if( textureKey == null ) return;\n    //     //\n    //     let texture = this.scene.textures.get(textureKey);\n    //     if( texture ){\n    //         this.farWidth = texture.getSourceImage().width;\n    //         //\n    //         let farBefore = this.scene.add.sprite(-this.farWidth,0, textureKey ).setOrigin(0.5,1);\n    //         let farCenter = this.scene.add.sprite(0,0, textureKey).setOrigin(0.5,1);\n    //         let farAfter = this.scene.add.sprite(this.farWidth,0,textureKey).setOrigin(0.5,1);\n    //         this.layerFar.add(farBefore);\n    //         this.layerFar.add(farCenter);\n    //         this.layerFar.add(farAfter);\n    //     }\n    // }\n    renderBack(mapLayoutKey) {\n        if (mapLayoutKey == null) return;\n        //\n        let textureKey = _adventure_repos_MapLayoutRepo__WEBPACK_IMPORTED_MODULE_3__.MapLayoutRepo.getTextureKey(mapLayoutKey);\n        if (textureKey == null) {\n            this.quickDebug.pushLog(\"MapBase > renderBack() > [\" + mapLayoutKey + \"] not found.\");\n            return;\n        }\n        //\n        let texture = this.scene.textures.get(textureKey);\n        if (texture) {\n            this.backWidth = texture.getSourceImage().width;\n            //\n            let backBefore = this.scene.add.sprite(-this.backWidth, 0, textureKey).setOrigin(0.5, 1);\n            let backCenter = this.scene.add.sprite(0, 0, textureKey).setOrigin(0.5, 1);\n            let backAfter = this.scene.add.sprite(this.backWidth, 0, textureKey).setOrigin(0.5, 1);\n            this.layerBack.add(backBefore);\n            this.layerBack.add(backCenter);\n            this.layerBack.add(backAfter);\n        }\n    }\n    renderMain(mapList) {\n        // Calculate Map Length Based on Main List Array and create map\n        let totalLength = 0;\n        mapList.forEach((mapLayoutKey)=>{\n            let textureKey = _adventure_repos_MapLayoutRepo__WEBPACK_IMPORTED_MODULE_3__.MapLayoutRepo.getTextureKey(mapLayoutKey);\n            if (textureKey == null) {\n                this.quickDebug.pushLog(\"MapBase > renderMain() > [\" + mapLayoutKey + \"] not found.\");\n                return;\n            }\n            if (textureKey) {\n                let mainCenter = this.scene.add.sprite(totalLength, 0, textureKey).setOrigin(0, 1);\n                this.layerMain.add(mainCenter);\n                //\n                let texture = this.scene.textures.get(textureKey);\n                if (texture) {\n                    totalLength += texture.getSourceImage().width;\n                }\n            }\n        });\n        this.mapLength = totalLength;\n    }\n    // calculate Map and View end\n    renderWallObject() {\n        // Wall Entity Configs\n        let wallEntityConfigs = [];\n        // Prepare Map Param\n        this.moveStartX = 200;\n        if (this.mapData.mapStart.key == _MapEnds_Interface_MapEndInterface__WEBPACK_IMPORTED_MODULE_6__.MapEndKey.WALL) {\n            this.moveStartX = this.wallMargin;\n            // Render Map Debug Aread\n            this.wallStartDebug = this.scene.add.rectangle(0, 0, this.wallMargin - 60, 1500, 0xff0000, 0.2).setOrigin(0, 1);\n            this.layerMain.add(this.wallStartDebug);\n        }\n        wallEntityConfigs = wallEntityConfigs.concat(this.mapData.mapStart.wallConfigs(this.moveStartX, _MapEnds_Interface_MapEndInterface__WEBPACK_IMPORTED_MODULE_6__.MapEndSide.LEFT));\n        this.moveEndX = this.mapLength - 200;\n        if (this.mapData.mapEnd.key == _MapEnds_Interface_MapEndInterface__WEBPACK_IMPORTED_MODULE_6__.MapEndKey.WALL) {\n            this.moveEndX = this.mapLength - this.wallMargin;\n            // Render Map Debug Aread\n            this.wallEndDebug = this.scene.add.rectangle(this.mapLength, 0, this.wallMargin - 60, 1500, 0xff0000, 0.2).setOrigin(1, 1);\n            this.layerMain.add(this.wallEndDebug);\n        }\n        wallEntityConfigs = wallEntityConfigs.concat(this.mapData.mapEnd.wallConfigs(this.moveEndX, _MapEnds_Interface_MapEndInterface__WEBPACK_IMPORTED_MODULE_6__.MapEndSide.RIGHT));\n        this.viewStartX = this.viewMargin;\n        this.viewEndX = this.mapLength - this.viewMargin;\n        this.wallMapEntities.renderEntities(wallEntityConfigs);\n    }\n    renderBackObject(entityConfigs) {\n        this.backMapEntities.renderEntities(entityConfigs);\n    }\n    renderFrontObject(entityConfigs) {\n        this.frontMapEntities.renderEntities(entityConfigs);\n    }\n    update(inputMovement, moveSpeed) {\n        let deltaX = this._calculateDeltaX(inputMovement, moveSpeed);\n        // Update currentX, handle basic movement\n        if (deltaX != 0) {\n            this.currentX += deltaX;\n            this.currentX = Math.min(this.moveEndX, this.currentX);\n            this.currentX = Math.max(this.moveStartX, this.currentX);\n        }\n        // Calculate Move State\n        this._updateMapPosition();\n        this._updateMoveDirection(deltaX);\n        this._updateMoveState(deltaX);\n        //\n        this._moveMap();\n        this.backMapEntities.checkCollision(this.currentX);\n    // Front object only as deco, not interactable (TBD)\n    // this.frontMapEntities.checkCollision(this.currentX);\n    }\n    _calculateDeltaX(inputMovement, moveSpeed) {\n        if (inputMovement == _Player_PlayerEnum__WEBPACK_IMPORTED_MODULE_2__.InputMovement.RIGHT) {\n            return moveSpeed;\n        } else if (inputMovement == _Player_PlayerEnum__WEBPACK_IMPORTED_MODULE_2__.InputMovement.LEFT) {\n            return -1 * moveSpeed;\n        } else {\n            return 0;\n        }\n    }\n    _updateMapPosition() {\n        // Return string > start, end, middle, effect on View Perspective\n        if (this.currentX < this.viewStartX) {\n            this.currentMapPosition = _MapEnum__WEBPACK_IMPORTED_MODULE_0__.MapPosition.START;\n        } else if (this.currentX > this.viewEndX) {\n            this.currentMapPosition = _MapEnum__WEBPACK_IMPORTED_MODULE_0__.MapPosition.END;\n        } else {\n            this.currentMapPosition = _MapEnum__WEBPACK_IMPORTED_MODULE_0__.MapPosition.MIDDLE;\n        }\n    }\n    _moveMap() {\n        // Calculate Map & Avatar Position\n        let newMapPositionX = -1 * this.currentX;\n        if (this.currentMapPosition == _MapEnum__WEBPACK_IMPORTED_MODULE_0__.MapPosition.START) {\n            // When Avatar reach Start, Map will stop moving, only avatar will move\n            newMapPositionX = -1 * this.viewStartX;\n            this.currentAvatarX = this.currentX - this.viewStartX;\n        } else if (this.currentMapPosition == _MapEnum__WEBPACK_IMPORTED_MODULE_0__.MapPosition.END) {\n            // When Avatar reach End, Map will stop moving, only avatar will move\n            newMapPositionX = -1 * this.viewEndX;\n            this.currentAvatarX = this.currentX - this.viewEndX;\n        } else {\n            this.currentAvatarX = 0;\n        }\n        // Calculate layerBack Remainder\n        // Layer Sky > Loop Type\n        let layerSkyPosX = newMapPositionX * 0.5 % this.skyWidth;\n        this.layerSky.setX(layerSkyPosX);\n        // Layer Far >  Loop Type\n        let layerFarPosX = newMapPositionX * 0.6 % this.farWidth;\n        this.layerFar.setX(layerFarPosX);\n        // Layer Back > Loop Type\n        let layerBackPosX = newMapPositionX * 1 % this.backWidth;\n        this.layerBack.setX(layerBackPosX);\n        // Layer Main > Fixed Type\n        this.layerMain.setX(newMapPositionX);\n        // Layer Objects\n        this.layerObjectBack.setX(newMapPositionX);\n        this.layerObjectFront.setX(newMapPositionX);\n        // Layer Front\n        this.layerFront.setX(newMapPositionX);\n    }\n    _updateMoveDirection(deltaX) {\n        if (deltaX > 0) {\n            this.currentMoveDirection = _MapEnum__WEBPACK_IMPORTED_MODULE_0__.MoveDirection.FORWARD;\n        } else if (deltaX < 0) {\n            this.currentMoveDirection = _MapEnum__WEBPACK_IMPORTED_MODULE_0__.MoveDirection.BACKWARD;\n        }\n    }\n    _updateMoveState(deltaX) {\n        // If Within Move Range && middle, use map\n        if (deltaX != 0) {\n            if (this.currentX > this.moveStartX && this.currentX < this.moveEndX) {\n                this.currentMoveState = _MapEnum__WEBPACK_IMPORTED_MODULE_0__.MoveState.MOVING;\n            } else {\n                this.currentMoveState = _MapEnum__WEBPACK_IMPORTED_MODULE_0__.MoveState.BLOCKED;\n            }\n        } else {\n            this.currentMoveState = _MapEnum__WEBPACK_IMPORTED_MODULE_0__.MoveState.STOP;\n        }\n    }\n    getContainer() {\n        return this.container;\n    }\n    setPlayerAvatar(avatar) {\n        this.layerPlayer.add(avatar.getContainer());\n    }\n    getAvatarMoveData() {\n        return {\n            direction: this.currentMoveDirection,\n            state: this.currentMoveState,\n            x: this.currentAvatarX\n        };\n    }\n    getMapEntities() {\n        return this.backMapEntities.getEntities();\n    }\n    getMapLength() {\n        return this.mapLength;\n    }\n    getMapPosition() {\n        return this.currentMapPosition;\n    }\n    getMapX() {\n        return this.currentX;\n    }\n    // Only For Debug ATM\n    getMovedX() {\n        return this.currentX;\n    }\n    // Only For Debug ATM\n    getMovableLength() {\n        return this.mapLength;\n    }\n    moveTo(x) {\n        x = Math.min(this.moveEndX, x);\n        x = Math.max(this.moveStartX, x);\n        this.currentX = x;\n        this._updateMapPosition();\n        this._moveMap();\n    }\n    constructor(scene, x, y){\n        //\n        this.skyOffsetY = -300;\n        this.backOffsetY = -300;\n        this.mainOffsetY = 50;\n        //\n        this.skyWidth = 2000;\n        this.farWidth = 2000 // x\n        ;\n        this.backWidth = 3240;\n        //\n        this.wallMargin = 600 // Wall block distance, If wall, should be 600, else 0?\n        ;\n        this.viewMargin = 1200 // Distance where Camera stop moving when reach\n        ;\n        //\n        // Calculate Map Length\n        this.mapLength = 0;\n        this.moveStartX = 0;\n        this.moveEndX = 10000;\n        this.viewStartX = 0;\n        this.viewEndX = 10000;\n        //\n        this.currentX = 1300;\n        this.currentMoveState = _MapEnum__WEBPACK_IMPORTED_MODULE_0__.MoveState.STOP;\n        this.currentMoveDirection = _MapEnum__WEBPACK_IMPORTED_MODULE_0__.MoveDirection.FORWARD;\n        this.scene = scene;\n        this.container = this.scene.add.container(x, y);\n        this.quickDebug = _Singleton_QuickDebug__WEBPACK_IMPORTED_MODULE_5__.QuickDebug.getInstance();\n        // Prepare Layers\n        this.layerSky = this.scene.add.container(0, this.skyOffsetY);\n        this.layerFar = this.scene.add.container(0, this.farOffsetY);\n        this.layerBack = this.scene.add.container(0, this.backOffsetY);\n        this.layerMain = this.scene.add.container(0, this.mainOffsetY);\n        this.layerObjectBack = this.scene.add.container(0, this.mainOffsetY);\n        this.layerPlayer = this.scene.add.container(0, 0);\n        this.layerObjectFront = this.scene.add.container(0, this.mainOffsetY);\n        this.layerFront = this.scene.add.container(0, this.frontOffsetY);\n        this.container.add(this.layerSky);\n        this.container.add(this.layerFar);\n        this.container.add(this.layerBack);\n        this.container.add(this.layerMain);\n        this.container.add(this.layerObjectBack);\n        this.container.add(this.layerPlayer); // Fixed Position\n        this.container.add(this.layerObjectFront);\n        this.container.add(this.layerFront);\n        // Add Map Objects\n        this.wallMapEntities = new _MapEntities__WEBPACK_IMPORTED_MODULE_1__[\"default\"](this.scene);\n        this.layerObjectBack.add(this.wallMapEntities.getContainer());\n        this.backMapEntities = new _MapEntities__WEBPACK_IMPORTED_MODULE_1__[\"default\"](this.scene);\n        this.layerObjectBack.add(this.backMapEntities.getContainer());\n        this.frontMapEntities = new _MapEntities__WEBPACK_IMPORTED_MODULE_1__[\"default\"](this.scene);\n        this.layerObjectFront.add(this.frontMapEntities.getContainer());\n        this._moveMap();\n    }\n}\n\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/adventure/components/Map/MapRenderer.ts\n"));

/***/ })

});