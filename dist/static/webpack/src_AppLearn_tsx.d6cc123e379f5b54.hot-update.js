"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("src_AppLearn_tsx",{

/***/ "./src/learn/components/Dialog/DialogController.ts":
/*!*********************************************************!*\
  !*** ./src/learn/components/Dialog/DialogController.ts ***!
  \*********************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ DialogController; }\n/* harmony export */ });\n/* harmony import */ var _lib_GameLib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/GameLib */ \"./src/lib/GameLib.ts\");\n/* harmony import */ var _Config_GameDepth__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Config/GameDepth */ \"./src/learn/components/Config/GameDepth.ts\");\n/* harmony import */ var _Config_GameText__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Config/GameText */ \"./src/learn/components/Config/GameText.ts\");\n\n\n\nclass DialogController {\n    static preload(scene) {\n        scene.load.setPath(\"assets\");\n        scene.load.image(\"speechBubble\", \"/learn/SpeechBubble.png\");\n        scene.load.image(\"dialogNext\", \"/learn/dialogNext.png\");\n    }\n    static preloadAudio(scene, dialog) {\n        scene.load.setPath(\"assets\");\n        if (dialog.audioAssetPath) {\n            dialog.lines.forEach((line)=>{\n                scene.load.audio(DialogController.audioKey(dialog.key, line.sequenceKey), dialog.audioAssetPath + \"/\" + line.sequenceKey + \".mp3\");\n            });\n        }\n    }\n    static audioKey(dialogKey, sequenceKey) {\n        return \"Audio_\" + dialogKey + \"_\" + sequenceKey;\n    }\n    // triggerCustomDialog( dialog: DialogData, onDialogEndCallBack?: Function ){\n    //     this.onDialogEndCallBack = onDialogEndCallBack;\n    //     // Set Dialog and reset\n    //     this.dialog = dialog;   \n    //     this.currentIndex = -1;\n    //     this.text.setText('');\n    //     this.disableNext();\n    //     this.open();\n    // }\n    triggerDialog(dialogData) {\n        if (dialogData) {\n            // Set Dialog and reset\n            this.dialog = dialogData;\n            this.currentIndex = -1;\n            this.text.setText(\"\");\n            this.disableNext();\n            this.open();\n        } else {\n            console.log(\"Dialog Key not found\");\n            this.runOnDialogEndCallBack();\n        }\n    }\n    disableNext() {\n        this.canNext = false;\n        this.spriteNextIcon.setVisible(false);\n        this.backdrop.setVisible(false);\n    }\n    enableNext() {\n        this.canNext = true;\n        this.spriteNextIcon.setVisible(true);\n        this.backdrop.setVisible(true);\n    }\n    open() {\n        // Show Backdrop\n        this.container.setVisible(true);\n        this.nextLine();\n        if (this.onOpenCallback) this.onOpenCallback();\n    }\n    close() {\n        this.container.setVisible(false);\n        if (this.onCloseCallback) this.onCloseCallback();\n        this.runOnDialogEndCallBack();\n    }\n    runOnDialogEndCallBack() {\n        if (this.onDialogEndCallBack != undefined) {\n            this.onDialogEndCallBack(this.dialog.key);\n            this.onDialogEndCallBack = undefined;\n        }\n    }\n    runOnLineEndCallback(line) {\n        // Call set onLineEndCallback\n        if (this.onLineEndCallback != undefined) {\n            this.onLineEndCallback(this.dialog.key, line.sequenceKey, line.lineEndKey);\n        }\n    }\n    endLine() {\n        this.disableNext();\n        // Stop sound\n        if (this.soundPlayer.isPlaying) {\n            this.soundPlayer.stop();\n        }\n        // Stop call back?\n        if (this.lineDelayedCallbacks && this.lineDelayedCallbacks.length > 0) {\n            this.lineDelayedCallbacks.forEach((delay)=>{\n                delay.remove();\n            });\n        }\n        let line = this.dialog.lines[this.currentIndex];\n        this.runOnLineEndCallback(line);\n        var _line_isPaused;\n        let isPaused = (_line_isPaused = line.isPaused) !== null && _line_isPaused !== void 0 ? _line_isPaused : false;\n        if (!isPaused) {\n            this.nextLine();\n        }\n    }\n    findLineIndex(sequenceKey) {\n        let index = -1;\n        this.dialog.lines.forEach((d, i)=>{\n            if (d.sequenceKey == sequenceKey) {\n                index = i;\n            }\n        });\n        return index;\n    }\n    nextLine(nextSequenceKey, delay) {\n        this.disableNext();\n        if (delay) {\n            this.scene.time.delayedCall(delay, this.nextLine, [\n                nextSequenceKey\n            ], this);\n            return;\n        }\n        let isOverwrite = false;\n        if (!nextSequenceKey) {\n            if (this.dialog.lines[this.currentIndex].nextSequenceKey != undefined) {\n                nextSequenceKey = this.dialog.lines[this.currentIndex].nextSequenceKey;\n            }\n        }\n        if (nextSequenceKey) {\n            let lineIndex = this.findLineIndex(nextSequenceKey);\n            if (lineIndex > -1) {\n                this.currentIndex = lineIndex;\n                isOverwrite = true;\n            }\n        }\n        // render Line\n        if (!isOverwrite) {\n            this.currentIndex += 1;\n        }\n        if (this.dialog) {\n            if (this.currentIndex < this.dialog.lines.length) {\n                const line = this.dialog.lines[this.currentIndex];\n                this.text.setText(line.message);\n                // Setup delayed callback\n                if (this.onLineDelayCallback) {\n                    var _line_delayCallbacks;\n                    (_line_delayCallbacks = line.delayCallbacks) === null || _line_delayCallbacks === void 0 ? void 0 : _line_delayCallbacks.forEach((delayCallback)=>{\n                        let delayCall = this.scene.time.delayedCall(delayCallback.delay, this.onLineDelayCallback, [\n                            this.dialog.key,\n                            line.sequenceKey,\n                            delayCallback.delay,\n                            delayCallback.key\n                        ], this);\n                        this.lineDelayedCallbacks.push(delayCall);\n                    });\n                }\n                // Check Sound\n                // If have audio then play, if audio is played, line end when\n                let audioKey = DialogController.audioKey(this.dialog.key, line.sequenceKey);\n                let hasAudio = false;\n                if (this.scene.cache.audio.exists(audioKey)) {\n                    this.soundPlayer = this.scene.sound.add(audioKey);\n                    this.soundPlayer.play();\n                    if (this.soundPlayer.isPlaying) {\n                        hasAudio = true;\n                        this.soundPlayer.on(\"complete\", ()=>{\n                            this.enableNext();\n                        });\n                    }\n                }\n                // If no audio played, or can skip option is enabled\n                // Able to next line with delayed time\n                if (this.canSkip || !hasAudio) {\n                    this.scene.time.delayedCall(300, ()=>{\n                        this.enableNext();\n                    });\n                }\n            } else {\n                this.close();\n            }\n        }\n    }\n    constructor(scene){\n        this.canSkip = true;\n        this.lineDelayedCallbacks = [];\n        this.scene = scene;\n        this.container = this.scene.add.container(_lib_GameLib__WEBPACK_IMPORTED_MODULE_0__[\"default\"].midX, _lib_GameLib__WEBPACK_IMPORTED_MODULE_0__[\"default\"].midY).setDepth(_Config_GameDepth__WEBPACK_IMPORTED_MODULE_1__.GameDepth.UI_DIALOG);\n        // Add Backdrop?\n        this.backdrop = this.scene.add.rectangle(0, 0, _lib_GameLib__WEBPACK_IMPORTED_MODULE_0__[\"default\"].screenWidth, _lib_GameLib__WEBPACK_IMPORTED_MODULE_0__[\"default\"].screenHeight, 0x000000, 0);\n        this.container.add(this.backdrop);\n        this.boxContainer = this.scene.add.container(-_lib_GameLib__WEBPACK_IMPORTED_MODULE_0__[\"default\"].midX, -_lib_GameLib__WEBPACK_IMPORTED_MODULE_0__[\"default\"].midY);\n        this.container.add(this.boxContainer);\n        // Add Bubble\n        this.dialogBox = scene.add.sprite(0, 0, \"speechBubble\").setOrigin(0, 0);\n        this.boxContainer.add(this.dialogBox);\n        // Add Text Content\n        let padding = 80;\n        this.text = this.scene.add.text(padding, padding, \"???\", {\n            fontSize: _Config_GameText__WEBPACK_IMPORTED_MODULE_2__.GameText.MD,\n            color: \"black\",\n            wordWrap: {\n                width: _lib_GameLib__WEBPACK_IMPORTED_MODULE_0__[\"default\"].screenWidth - padding * 2,\n                useAdvancedWrap: true\n            },\n            // fixedHeight: boxHeight-padding-100,\n            maxLines: 5\n        });\n        this.boxContainer.add(this.text);\n        // let ref:GameObjects.Rectangle = this.scene.add.rectangle(0,0,100,100,0x00000);\n        // this.boxContainer.add(ref);\n        // Add Next Hint Text\n        this.spriteNextIcon = this.scene.add.sprite(_lib_GameLib__WEBPACK_IMPORTED_MODULE_0__[\"default\"].screenWidth - 60, 360, \"dialogNext\").setOrigin(1);\n        this.spriteNextIcon.setDisplaySize(80, 60);\n        this.boxContainer.add(this.spriteNextIcon);\n        this.scene.tweens.add({\n            targets: this.spriteNextIcon,\n            y: \"+=25\",\n            duration: 500,\n            ease: \"Cubic\",\n            repeat: -1,\n            yoyo: true\n        });\n        // add click\n        this.backdrop.setInteractive();\n        this.backdrop.on(\"pointerup\", ()=>{\n            if (this.canNext) {\n                this.endLine();\n            }\n        }, this);\n        this.container.setVisible(false);\n    }\n}\n/* Dialog Controller\n* - Function: start dialog\n* - Function: next line\n* - Function: pause \n* - Function: continue\n* - Function: callback On Delay (timer to run function)\n* -- to trigger effect upon delay \n* - Function: callback On finish line\n*/ \n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/learn/components/Dialog/DialogController.ts\n"));

/***/ })

});