"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("src_AppAdventure_tsx",{

/***/ "./src/adventure/components/Map/MapBase.ts":
/*!*************************************************!*\
  !*** ./src/adventure/components/Map/MapBase.ts ***!
  \*************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ MapBase; }\n/* harmony export */ });\n/* harmony import */ var _MapEnum__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./MapEnum */ \"./src/adventure/components/Map/MapEnum.ts\");\n/* harmony import */ var _MapEntities__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./MapEntities */ \"./src/adventure/components/Map/MapEntities.ts\");\n/* harmony import */ var _lib_repos_MapObjectRepo__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/repos/MapObjectRepo */ \"./src/lib/repos/MapObjectRepo.ts\");\n/* harmony import */ var _Player_PlayerEnum__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../Player/PlayerEnum */ \"./src/adventure/components/Player/PlayerEnum.ts\");\n\n\n\n\nclass MapBase {\n    // Sidescrolling Map\n    static preload(scene) {\n        scene.load.image(\"mapLayerBack\", \"assets/adventure/maps/garden/LayerBack.png\");\n        scene.load.image(\"mapLayerMain\", \"assets/adventure/maps/garden/LayerMain.png\");\n        // scene.load.image('mapLayerMain', 'assets/adventure/maps/garden/DebugMain.png');\n        scene.load.image(\"mapLayerSky\", \"assets/adventure/maps/garden/LayerSky.png\");\n        scene.load.image(\"mapMainDemo001\", \"assets/adventure/maps/demo/LayerMain001.png\");\n        scene.load.image(\"mapMainDemo002\", \"assets/adventure/maps/demo/LayerMain002.png\");\n        scene.load.image(\"mapMainDemo003\", \"assets/adventure/maps/demo/LayerMain003.png\");\n        //\n        scene.load.image(\"mapMainShortDemo001\", \"assets/adventure/maps/demo/LayerMainShort001.png\");\n        scene.load.image(\"mapMainShortDemo002\", \"assets/adventure/maps/demo/LayerMainShort002.png\");\n        scene.load.image(\"mapMainShortDemo003\", \"assets/adventure/maps/demo/LayerMainShort003.png\");\n        _lib_repos_MapObjectRepo__WEBPACK_IMPORTED_MODULE_2__.MapObjectRepo.preload(scene);\n    }\n    renderSky(textureKey) {\n        // Layer Sky\n        let texture = this.scene.textures.get(textureKey);\n        if (texture) {\n            this.skyWidth = texture.getSourceImage().width;\n            //\n            let skyBefore = this.scene.add.sprite(-this.skyWidth, 0, textureKey).setOrigin(0.5, 1);\n            let skyCenter = this.scene.add.sprite(0, 0, textureKey).setOrigin(0.5, 1);\n            let skyAfter = this.scene.add.sprite(this.skyWidth, 0, textureKey).setOrigin(0.5, 1);\n            this.layerSky.add(skyBefore);\n            this.layerSky.add(skyCenter);\n            this.layerSky.add(skyAfter);\n        }\n    }\n    renderFar(textureKey) {\n        // Layer Far\n        let texture = this.scene.textures.get(textureKey);\n        if (texture) {\n            this.farWidth = texture.getSourceImage().width;\n            //\n            let farBefore = this.scene.add.sprite(-this.farWidth, 0, textureKey).setOrigin(0.5, 1);\n            let farCenter = this.scene.add.sprite(0, 0, textureKey).setOrigin(0.5, 1);\n            let farAfter = this.scene.add.sprite(this.farWidth, 0, textureKey).setOrigin(0.5, 1);\n            this.layerFar.add(farBefore);\n            this.layerFar.add(farCenter);\n            this.layerFar.add(farAfter);\n        }\n    }\n    renderBack(textureKey) {\n        let texture = this.scene.textures.get(textureKey);\n        if (texture) {\n            this.backWidth = texture.getSourceImage().width;\n            //\n            let backBefore = this.scene.add.sprite(-this.backWidth, 0, textureKey).setOrigin(0.5, 1);\n            let backCenter = this.scene.add.sprite(0, 0, textureKey).setOrigin(0.5, 1);\n            let backAfter = this.scene.add.sprite(this.backWidth, 0, textureKey).setOrigin(0.5, 1);\n            this.layerBack.add(backBefore);\n            this.layerBack.add(backCenter);\n            this.layerBack.add(backAfter);\n        }\n    }\n    renderMain(mapList) {\n        // Calculate Map Length Based on Main List Array and create map\n        let totalLength = 0;\n        mapList.forEach((mapKey)=>{\n            let mainCenter = this.scene.add.sprite(totalLength, 0, mapKey).setOrigin(0, 1);\n            this.layerMain.add(mainCenter);\n            let texture = this.scene.textures.get(mapKey);\n            if (texture) {\n                totalLength += texture.getSourceImage().width;\n            }\n        });\n        this.mapLength = totalLength;\n        // Prepare Map Param\n        this.moveStartX = this.moveMargin;\n        this.moveEndX = this.mapLength - this.moveMargin;\n        this.viewStartX = this.viewMargin;\n        this.viewEndX = this.mapLength - this.viewMargin;\n        // Render Overlay End Wall on LayerExtra\n        this.wallStart = this.scene.add.rectangle(0, 0, this.moveMargin - 60, 1500, 0xff0000, 0.5).setOrigin(0, 1);\n        this.wallEnd = this.scene.add.rectangle(this.mapLength, 0, this.moveMargin - 60, 1500, 0xff0000, 0.5).setOrigin(1, 1);\n        this.layerMain.add(this.wallStart);\n        this.layerMain.add(this.wallEnd);\n    }\n    renderBackObject(entityList) {\n        this.backMapEntities.renderEntities(entityList);\n    }\n    renderFrontObject(entityList) {\n        this.frontMapEntities.renderEntities(entityList);\n    }\n    update(inputMovement, moveSpeed) {\n        let deltaX = this._calculateDeltaX(inputMovement, moveSpeed);\n        // Update currentX, handle basic movement\n        if (deltaX != 0) {\n            this.currentX += deltaX;\n            this.currentX = Math.min(this.moveEndX, this.currentX);\n            this.currentX = Math.max(this.moveStartX, this.currentX);\n        }\n        // Calculate Move State\n        this._calculateMoveDirection(deltaX);\n        this._calculateMoveState(deltaX);\n        //\n        this._moveMap();\n        this.backMapEntities.checkCollision(this.currentX);\n        this.frontMapEntities.checkCollision(this.currentX);\n    }\n    _calculateDeltaX(inputMovement, moveSpeed) {\n        if (inputMovement == _Player_PlayerEnum__WEBPACK_IMPORTED_MODULE_3__.InputMovement.RIGHT) {\n            return moveSpeed;\n        } else if (inputMovement == _Player_PlayerEnum__WEBPACK_IMPORTED_MODULE_3__.InputMovement.LEFT) {\n            return moveSpeed;\n        } else {\n            return 0;\n        }\n    }\n    _calculateMapPosition() {}\n    _moveMap() {\n        // Calculate Map & Avatar Position\n        let newMapPositionX = -1 * this.currentX;\n        if (this.getMapPosition() == _MapEnum__WEBPACK_IMPORTED_MODULE_0__.MapPosition.START) {\n            newMapPositionX = -1 * this.viewStartX;\n            this.currentAvatarX = this.currentX - this.viewStartX;\n        } else if (this.getMapPosition() == _MapEnum__WEBPACK_IMPORTED_MODULE_0__.MapPosition.END) {\n            newMapPositionX = -1 * this.viewEndX;\n            this.currentAvatarX = this.currentX - this.viewEndX;\n        } else {\n            this.currentAvatarX = 0;\n        }\n        // Calculate layerBack Remainder\n        // Layer Sky > Loop Type\n        let layerSkyPosX = newMapPositionX * 0.5 % this.skyWidth;\n        this.layerSky.setX(layerSkyPosX);\n        // Layer Far >  Loop Type\n        let layerFarPosX = newMapPositionX * 0.6 % this.farWidth;\n        this.layerFar.setX(layerFarPosX);\n        // Layer Back > Loop Type\n        let layerBackPosX = newMapPositionX * 1 % this.backWidth;\n        this.layerBack.setX(layerBackPosX);\n        // Layer Main > Fixed Type\n        this.layerMain.setX(newMapPositionX);\n        // Layer Objects\n        this.layerObjectBack.setX(newMapPositionX);\n        this.layerObjectFront.setX(newMapPositionX);\n        // Layer Front\n        this.layerFront.setX(newMapPositionX);\n    }\n    _calculateMoveDirection(deltaX) {\n        if (deltaX > 0) {\n            this.currentMoveDirection = _MapEnum__WEBPACK_IMPORTED_MODULE_0__.MoveDirection.FORWARD;\n        } else if (deltaX < 0) {\n            this.currentMoveDirection = _MapEnum__WEBPACK_IMPORTED_MODULE_0__.MoveDirection.BACKWARD;\n        }\n    }\n    _calculateMoveState(deltaX) {\n        // If Within Move Range && middle, use map\n        if (deltaX != 0) {\n            if (this.currentX > this.moveStartX && this.currentX < this.moveEndX) {\n                this.currentMoveState = _MapEnum__WEBPACK_IMPORTED_MODULE_0__.MoveState.MOVING;\n            } else {\n                this.currentMoveState = _MapEnum__WEBPACK_IMPORTED_MODULE_0__.MoveState.BLOCKED;\n            }\n        } else {\n            this.currentMoveState = _MapEnum__WEBPACK_IMPORTED_MODULE_0__.MoveState.STOP;\n        }\n    }\n    getMapPosition() {\n        // Return string > start, end, middle, effect on View Perspective\n        if (this.currentX < this.viewStartX) {\n            return _MapEnum__WEBPACK_IMPORTED_MODULE_0__.MapPosition.START;\n        } else if (this.currentX > this.viewEndX) {\n            return _MapEnum__WEBPACK_IMPORTED_MODULE_0__.MapPosition.END;\n        } else {\n            return _MapEnum__WEBPACK_IMPORTED_MODULE_0__.MapPosition.MIDDLE;\n        }\n    }\n    getAvatarMoveData() {\n        return {\n            direction: this.currentMoveDirection,\n            state: this.currentMoveState,\n            x: this.currentAvatarX\n        };\n    }\n    // Only For Debug ATM\n    getMovedX() {\n        return this.currentX;\n    }\n    // Only For Debug ATM\n    getMovableLength() {\n        return this.mapLength;\n    }\n    constructor(scene, x, y){\n        //\n        this.skyOffsetY = -300;\n        this.backOffsetY = -300;\n        this.mainOffsetY = 50;\n        //\n        this.skyWidth = 2000;\n        this.farWidth = 2000 // x\n        ;\n        this.backWidth = 3240;\n        //\n        this.moveMargin = 600;\n        this.viewMargin = 1200;\n        //\n        // Calculate Map Length\n        this.mapLength = 0;\n        this.moveStartX = 0;\n        this.moveEndX = 10000;\n        this.viewStartX = 0;\n        this.viewEndX = 10000;\n        //\n        this.currentX = 1300;\n        this.currentMoveState = _MapEnum__WEBPACK_IMPORTED_MODULE_0__.MoveState.STOP;\n        this.currentMoveDirection = _MapEnum__WEBPACK_IMPORTED_MODULE_0__.MoveDirection.FORWARD;\n        this.scene = scene;\n        this.container = this.scene.add.container(x, y);\n        // Prepare Layers\n        this.layerSky = this.scene.add.container(0, this.skyOffsetY);\n        this.layerFar = this.scene.add.container(0, this.farOffsetY);\n        this.layerBack = this.scene.add.container(0, this.backOffsetY);\n        this.layerMain = this.scene.add.container(0, this.mainOffsetY);\n        this.layerObjectBack = this.scene.add.container(0, this.mainOffsetY);\n        this.layerPlayer = this.scene.add.container(0, 0);\n        this.layerObjectFront = this.scene.add.container(0, this.mainOffsetY);\n        this.layerFront = this.scene.add.container(0, this.frontOffsetY);\n        this.container.add(this.layerSky);\n        this.container.add(this.layerFar);\n        this.container.add(this.layerBack);\n        this.container.add(this.layerMain);\n        this.container.add(this.layerObjectBack);\n        this.container.add(this.layerPlayer); // Fixed Position\n        this.container.add(this.layerObjectFront);\n        this.container.add(this.layerFront);\n        // Add Map Objects\n        this.backMapEntities = new _MapEntities__WEBPACK_IMPORTED_MODULE_1__[\"default\"](this.scene);\n        this.layerObjectBack.add(this.backMapEntities.container);\n        this.frontMapEntities = new _MapEntities__WEBPACK_IMPORTED_MODULE_1__[\"default\"](this.scene);\n        this.layerObjectFront.add(this.frontMapEntities.container);\n        this._moveMap();\n    }\n}\n\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/adventure/components/Map/MapBase.ts\n"));

/***/ })

});