"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("src_App_tsx",{

/***/ "./src/game/scenes/Battle.ts":
/*!***********************************!*\
  !*** ./src/game/scenes/Battle.ts ***!
  \***********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Battle: function() { return /* binding */ Battle; }\n/* harmony export */ });\n/* harmony import */ var _lib_GameLib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/GameLib */ \"./src/lib/GameLib.ts\");\n/* harmony import */ var _EventBus__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../EventBus */ \"./src/game/EventBus.ts\");\n/* harmony import */ var phaser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! phaser */ \"./node_modules/phaser/dist/phaser.js\");\n/* harmony import */ var phaser__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(phaser__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _components_GameManager__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../components/GameManager */ \"./src/game/components/GameManager.ts\");\n/* harmony import */ var _lib_components_DebugButton__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/lib/components/DebugButton */ \"./src/lib/components/DebugButton.ts\");\n/* harmony import */ var _components_CardRepo__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../components/CardRepo */ \"./src/game/components/CardRepo.ts\");\n/* harmony import */ var _components_Opponent__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../components/Opponent */ \"./src/game/components/Opponent.ts\");\n/* harmony import */ var _components_HealthBar__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../components/HealthBar */ \"./src/game/components/HealthBar.ts\");\n/* harmony import */ var _modals_ModalSimpleMessage__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../modals/ModalSimpleMessage */ \"./src/game/modals/ModalSimpleMessage.ts\");\n\n\n\n\n\n\n\n\n\nclass Battle extends phaser__WEBPACK_IMPORTED_MODULE_2__.Scene {\n    create(data) {\n        this.camera = this.cameras.main;\n        this.camera.setBackgroundColor(0xe6e6e6);\n        this.gameManager = new _components_GameManager__WEBPACK_IMPORTED_MODULE_3__[\"default\"](this);\n        this.gameManager.loadData();\n        // Get Opponent Data\n        let cardKey = this.gameManager.getCardKey(this.gameManager.battleSlotNumber);\n        let card = _components_CardRepo__WEBPACK_IMPORTED_MODULE_5__.CardRepo.findCard(cardKey);\n        if (card == undefined) {\n            console.log(\"Unable to find Card Data\");\n            this.simulateWin();\n            return;\n        }\n        // Render Opponent Sprite\n        this.opponent = new _components_Opponent__WEBPACK_IMPORTED_MODULE_6__[\"default\"](this, card);\n        // Render Player\n        this.player = this.add.sprite(_lib_GameLib__WEBPACK_IMPORTED_MODULE_0__[\"default\"].screenWidth / 2, _lib_GameLib__WEBPACK_IMPORTED_MODULE_0__[\"default\"].screenHeight - 200, \"player\");\n        this.playerHealthBar = new _components_HealthBar__WEBPACK_IMPORTED_MODULE_7__[\"default\"](this, _lib_GameLib__WEBPACK_IMPORTED_MODULE_0__[\"default\"].screenWidth / 2, _lib_GameLib__WEBPACK_IMPORTED_MODULE_0__[\"default\"].screenHeight - 400);\n        this.renderHealth();\n        // Render Match Game\n        this.tiles = this.add.group();\n        let debugWin = new _lib_components_DebugButton__WEBPACK_IMPORTED_MODULE_4__[\"default\"](this, 150, _lib_GameLib__WEBPACK_IMPORTED_MODULE_0__[\"default\"].screenHeight - 100, \"Set Win\");\n        debugWin.scale = 0.5;\n        this.add.existing(debugWin);\n        debugWin.onPressed(()=>{\n            this.simulateWin();\n        });\n        let debugLose = new _lib_components_DebugButton__WEBPACK_IMPORTED_MODULE_4__[\"default\"](this, 150, _lib_GameLib__WEBPACK_IMPORTED_MODULE_0__[\"default\"].screenHeight - 200, \"Set Lose\");\n        debugLose.scale = 0.5;\n        this.add.existing(debugLose);\n        debugLose.onPressed(()=>{\n            this.simulateLose();\n        });\n        let debugAttack = new _lib_components_DebugButton__WEBPACK_IMPORTED_MODULE_4__[\"default\"](this, _lib_GameLib__WEBPACK_IMPORTED_MODULE_0__[\"default\"].screenWidth - 150, _lib_GameLib__WEBPACK_IMPORTED_MODULE_0__[\"default\"].screenHeight - 200, \"Attack\");\n        debugAttack.scale = 0.5;\n        this.add.existing(debugAttack);\n        debugAttack.onPressed(()=>{\n            this.playerAttack();\n        });\n        this.events.addListener(\"player-update\", ()=>{\n            this.renderHealth();\n            this.checkWinLoseCondition();\n        });\n        this.events.addListener(\"opponent-update\", ()=>{\n            this.checkWinLoseCondition();\n        });\n        this.initTiles();\n        _EventBus__WEBPACK_IMPORTED_MODULE_1__.EventBus.emit(\"current-scene-ready\", this);\n    }\n    renderHealth() {\n        this.playerHealthBar.renderHealth(this.gameManager.currentHp, this.gameManager.maxHp);\n    }\n    playerAttack() {\n        this.opponent.damage(1);\n    }\n    simulateWin() {\n        this.processWin();\n    }\n    simulateLose() {\n        this.gameManager.damage();\n        this.gameManager.damage();\n        this.gameManager.damage();\n    }\n    checkWinLoseCondition() {\n        if (this.gameManager.currentHp <= 0) {\n            this.processLose();\n        }\n        if (this.opponent.currentHp <= 0) {\n            this.processWin();\n        }\n    }\n    processWin() {\n        new _modals_ModalSimpleMessage__WEBPACK_IMPORTED_MODULE_8__[\"default\"](this, \"ModalWin\", \"Win\", ()=>{\n            this.clean();\n            this.gameManager.clearCardKey(this.gameManager.battleSlotNumber);\n            this.gameManager.setBattleSlotNumber(0);\n            this.gameManager.saveData();\n            this.scene.start(\"Game\", {\n                isContinue: true\n            });\n        });\n    }\n    processLose() {\n        new _modals_ModalSimpleMessage__WEBPACK_IMPORTED_MODULE_8__[\"default\"](this, \"ModalLose\", \"Lose\", ()=>{\n            this.clean();\n            this.gameManager.clearData();\n            this.scene.start(\"GameOver\", {\n                status: this.gameManager.checkGameStatus()\n            });\n        });\n    }\n    clean() {\n        this.events.removeListener(\"player-update\");\n        this.events.removeListener(\"opponent-update\");\n        this.cameras.resetAll();\n    }\n    // Tiles \n    initTiles() {\n        this.tileStartX = _lib_GameLib__WEBPACK_IMPORTED_MODULE_0__[\"default\"].screenWidth / 2 - this.tileSize * this.tileGrid.length / 2;\n        this.tileStartY = _lib_GameLib__WEBPACK_IMPORTED_MODULE_0__[\"default\"].screenHeight / 2 - this.tileSize * this.tileGrid[0].length / 2;\n        //Loop through each column in the grid\n        for(var i = 0; i < this.tileGrid.length; i++){\n            //Loop through each position in a specific column, starting from the top\n            for(var j = 0; j < this.tileGrid[i].length; j++){\n                //Add the tile to the game at this grid position\n                var tile = this.addTile(i, j);\n                //Keep a track of the tiles position in our tileGrid\n                this.tileGrid[i][j] = tile;\n            }\n        }\n    //Once the tiles are ready, check for any matches on the grid\n    // this.game.time.events.add(600, function(){\n    //     this.checkMatch();\n    // });\n    }\n    addTile(x, y) {\n        let size = 128;\n        //Choose a random tile to add\n        var tileToAdd = this.tileTypes[Phaser.Math.Between(0, this.tileTypes.length - 1)];\n        //Add the tile at the correct x position, but add it to the top of the game (so we can slide it in)\n        var tile = this.make.sprite({\n            x: this.tileStartX + x * size + size / 2,\n            y: this.tileStartY,\n            key: tileToAdd\n        });\n        // var tile:GameObjects.Sprite = this.tiles.create( this.tileStartX + (x * size) + size / 2, this.tileStartY, tileToAdd);\n        this.tiles.add(tile);\n        //Animate the tile into the correct vertical position\n        this.tweens.add({\n            targets: tile,\n            y: this.tileStartY + (y * size + size / 2),\n            duration: 500,\n            ease: \"Linear\",\n            repeat: 0,\n            yoyo: false\n        });\n        //Set the tiles anchor point to the center\n        tile.setOrigin(0.5, 0.5);\n        //Enable input on the tile\n        tile.setInteractive();\n        //Keep track of the type of tile that was added\n        tile.setData(\"tileType\", tileToAdd);\n        //Trigger the tileDown function whenever the user clicks or taps on this tile\n        tile.on(\"pointerdown\", ()=>{\n            this.tileDown(tile, this.physics);\n        }, this);\n        return tile;\n    }\n    tileDown(tile, pointer) {\n        //Keep track of where the user originally clicked\n        if (this.canMove) {\n            this.activeTile1 = tile;\n            this.startPosX = (tile.x - this.tileSize / 2) / this.tileSize;\n            this.startPosY = (tile.y - this.tileSize / 2) / this.tileSize;\n        }\n    }\n    update() {\n        //The user is currently dragging from a tile, so let's see if they have dragged\n        //over the top of an adjacent tile\n        if (this.activeTile1 && !this.activeTile2) {\n            //Get the location of where the pointer is currently\n            var hoverX = this.game.input.activePointer.x;\n            var hoverY = this.game.input.activePointer.y;\n            //Figure out what position on the grid that translates to\n            var hoverPosX = Math.floor(hoverX / this.tileSize);\n            var hoverPosY = Math.floor(hoverY / this.tileSize);\n            //See if the user had dragged over to another position on the grid\n            var difX = hoverPosX - this.startPosX;\n            var difY = hoverPosY - this.startPosY;\n            //Make sure we are within the bounds of the grid\n            if (!(hoverPosY > this.tileGrid[0].length - 1 || hoverPosY < 0) && !(hoverPosX > this.tileGrid.length - 1 || hoverPosX < 0)) {\n                //If the user has dragged an entire tiles width or height in the x or y direction\n                //trigger a tile swap\n                if (Math.abs(difY) == 1 && difX == 0 || Math.abs(difX) == 1 && difY == 0) {\n                    //Prevent the player from making more moves whilst checking is in progress\n                    this.canMove = false;\n                    //Set the second active tile (the one where the user dragged to)\n                    this.activeTile2 = this.tileGrid[hoverPosX][hoverPosY];\n                    //Swap the two active tiles\n                    this.swapTiles();\n                    //After the swap has occurred, check the grid for any matches\n                    this.time.delayedCall(500, ()=>{\n                        this.checkMatch();\n                    }, [], this);\n                }\n            }\n        }\n    }\n    swapTiles() {\n        //If there are two active tiles, swap their positions\n        if (this.activeTile1 && this.activeTile2) {\n            var tile1Pos = {\n                x: (this.activeTile1.x - this.tileSize / 2) / this.tileSize,\n                y: (this.activeTile1.y - this.tileSize / 2) / this.tileSize\n            };\n            var tile2Pos = {\n                x: (this.activeTile2.x - this.tileSize / 2) / this.tileSize,\n                y: (this.activeTile2.y - this.tileSize / 2) / this.tileSize\n            };\n            //Swap them in our \"theoretical\" grid\n            this.tileGrid[tile1Pos.x][tile1Pos.y] = this.activeTile2;\n            this.tileGrid[tile2Pos.x][tile2Pos.y] = this.activeTile1;\n            //Actually move them on the screen\n            this.tweens.add({\n                targets: this.activeTile1,\n                x: tile2Pos.x * this.tileSize + this.tileSize / 2,\n                y: tile2Pos.y * this.tileSize + this.tileSize / 2,\n                duration: 200,\n                ease: \"Linear\"\n            });\n            this.tweens.add({\n                targets: this.activeTile2,\n                x: tile1Pos.x * this.tileSize + this.tileSize / 2,\n                y: tile1Pos.y * this.tileSize + this.tileSize / 2,\n                duration: 200,\n                ease: \"Linear\"\n            });\n            this.activeTile1 = this.tileGrid[tile1Pos.x][tile1Pos.y];\n            this.activeTile2 = this.tileGrid[tile2Pos.x][tile2Pos.y];\n        }\n    }\n    checkMatch() {\n        //Call the getMatches function to check for spots where there is\n        //a run of three or more tiles in a row\n        var matches = this.getMatches(this.tileGrid);\n        //If there are matches, remove them\n        if (matches.length > 0) {\n            //Remove the tiles\n            this.removeTileGroup(matches);\n            //Move the tiles currently on the board into their new positions\n            this.resetTile();\n            //Fill the board with new tiles wherever there is an empty spot\n            this.fillTile();\n            //Trigger the tileUp event to reset the active tiles\n            this.time.delayedCall(500, ()=>{\n                this.tileUp();\n            }, [], this);\n            //Check again to see if the repositioning of tiles caused any new matches\n            this.time.delayedCall(600, ()=>{\n                this.checkMatch();\n            }, [], this);\n        } else {\n            //No match so just swap the tiles back to their original position and reset\n            this.swapTiles();\n            this.time.delayedCall(500, ()=>{\n                this.tileUp();\n                this.canMove = true;\n            }, [], this);\n        }\n    }\n    tileUp() {\n        //Reset the active tiles\n        this.activeTile1 = null;\n        this.activeTile2 = null;\n    }\n    getMatches(tileGrid) {\n        var matches = [];\n        var groups = [];\n        //Check for horizontal matches\n        for(var i = 0; i < tileGrid.length; i++){\n            var tempArr = tileGrid[i];\n            groups = [];\n            for(var j = 0; j < tempArr.length; j++){\n                if (j < tempArr.length - 2) {\n                    if (tileGrid[i][j] && tileGrid[i][j + 1] && tileGrid[i][j + 2]) {\n                        if (tileGrid[i][j].tileType == tileGrid[i][j + 1].tileType && tileGrid[i][j + 1].tileType == tileGrid[i][j + 2].tileType) {\n                            if (groups.length > 0) {\n                                if (groups.indexOf(tileGrid[i][j]) == -1) {\n                                    matches.push(groups);\n                                    groups = [];\n                                }\n                            }\n                            if (groups.indexOf(tileGrid[i][j]) == -1) {\n                                groups.push(tileGrid[i][j]);\n                            }\n                            if (groups.indexOf(tileGrid[i][j + 1]) == -1) {\n                                groups.push(tileGrid[i][j + 1]);\n                            }\n                            if (groups.indexOf(tileGrid[i][j + 2]) == -1) {\n                                groups.push(tileGrid[i][j + 2]);\n                            }\n                        }\n                    }\n                }\n            }\n            if (groups.length > 0) matches.push(groups);\n        }\n        //Check for vertical matches\n        for(j = 0; j < tileGrid.length; j++){\n            var tempArr = tileGrid[j];\n            groups = [];\n            for(i = 0; i < tempArr.length; i++){\n                if (i < tempArr.length - 2) {\n                    if (tileGrid[i][j] && tileGrid[i + 1][j] && tileGrid[i + 2][j]) {\n                        if (tileGrid[i][j].tileType == tileGrid[i + 1][j].tileType && tileGrid[i + 1][j].tileType == tileGrid[i + 2][j].tileType) {\n                            if (groups.length > 0) {\n                                if (groups.indexOf(tileGrid[i][j]) == -1) {\n                                    matches.push(groups);\n                                    groups = [];\n                                }\n                            }\n                            if (groups.indexOf(tileGrid[i][j]) == -1) {\n                                groups.push(tileGrid[i][j]);\n                            }\n                            if (groups.indexOf(tileGrid[i + 1][j]) == -1) {\n                                groups.push(tileGrid[i + 1][j]);\n                            }\n                            if (groups.indexOf(tileGrid[i + 2][j]) == -1) {\n                                groups.push(tileGrid[i + 2][j]);\n                            }\n                        }\n                    }\n                }\n            }\n            if (groups.length > 0) matches.push(groups);\n        }\n        return matches;\n    }\n    removeTileGroup(matches) {\n        //Loop through all the matches and remove the associated tiles\n        for(var i = 0; i < matches.length; i++){\n            var tempArr = matches[i];\n            for(var j = 0; j < tempArr.length; j++){\n                var tile = tempArr[j];\n                //Find where this tile lives in the theoretical grid\n                var tilePos = this.getTilePos(this.tileGrid, tile);\n                //Remove the tile from the screen\n                this.tiles.remove(tile);\n                //Remove the tile from the theoretical grid\n                if (tilePos.x != -1 && tilePos.y != -1) {\n                    this.tileGrid[tilePos.x][tilePos.y] = null;\n                }\n            }\n        }\n    }\n    constructor(){\n        super(\"Battle\");\n        //\n        this.tileTypes = [\n            \"blue\",\n            \"green\",\n            \"orange\",\n            \"red\"\n        ];\n        this.score = 0;\n        this.activeTile1 = null;\n        this.activeTile2 = null;\n        this.tileGrid = [\n            [\n                null,\n                null,\n                null,\n                null,\n                null,\n                null\n            ],\n            [\n                null,\n                null,\n                null,\n                null,\n                null,\n                null\n            ],\n            [\n                null,\n                null,\n                null,\n                null,\n                null,\n                null\n            ],\n            [\n                null,\n                null,\n                null,\n                null,\n                null,\n                null\n            ],\n            [\n                null,\n                null,\n                null,\n                null,\n                null,\n                null\n            ],\n            [\n                null,\n                null,\n                null,\n                null,\n                null,\n                null\n            ]\n        ];\n        this.canMove = true;\n        this.tileSize = 128;\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/game/scenes/Battle.ts\n"));

/***/ })

});