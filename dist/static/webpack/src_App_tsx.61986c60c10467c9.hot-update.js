"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("src_App_tsx",{

/***/ "./src/game/components/Match.ts":
/*!**************************************!*\
  !*** ./src/game/components/Match.ts ***!
  \**************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ Match; }\n/* harmony export */ });\nclass Gem {\n}\nclass Match {\n    drawField() {\n        this.gameArray = [];\n        this.poolArray = [];\n        this.gemGroup = this.scene.add.group();\n        for(let i = 0; i < this.fieldSize; i++){\n            this.gameArray[i] = [];\n            for(let j = 0; j < this.fieldSize; j++){\n                let color = this.randomColor();\n                let gem = this.scene.add.sprite(this.gemSize * j + this.gemSize / 2, this.gemSize * i + this.gemSize / 2, color);\n                this.gemGroup.add(gem);\n                this.gameArray[i][j] = {\n                    gemColor: color,\n                    gemSprite: gem,\n                    isEmpty: false\n                };\n            }\n        }\n    }\n    isMatch(row, col) {\n        return this.isHorizontalMatch(row, col) || this.isVerticalMatch(row, col);\n    }\n    isHorizontalMatch(row, col) {\n        return this.gemAt(row, col).gemColor == this.gemAt(row, col - 1).gemColor && this.gemAt(row, col).gemColor == this.gemAt(row, col - 2).gemColor;\n    }\n    isVerticalMatch(row, col) {\n        return this.gemAt(row, col).gemColor == this.gemAt(row - 1, col).gemColor && this.gemAt(row, col).gemColor == this.gemAt(row - 2, col).gemColor;\n    }\n    gemAt(row, col) {\n        if (row < 0 || row >= this.fieldSize || col < 0 || col >= this.fieldSize) {\n            return -1;\n        }\n        return this.gameArray[row][col];\n    }\n    gemSelect(pointer) {\n        if (this.canPick) {\n            this.dragging = true;\n            let row = Math.floor(pointer.y / this.gemSize);\n            let col = Math.floor(pointer.x / this.gemSize);\n            let pickedGem = this.gemAt(row, col);\n            if (pickedGem != -1) {\n                if (this.selectedGem == null) {\n                    pickedGem.gemSprite.setScale(1.2);\n                    pickedGem.gemSprite.setDepth(1);\n                    this.selectedGem = pickedGem;\n                } else {\n                    if (this.areTheSame(pickedGem, this.selectedGem)) {\n                        this.selectedGem.gemSprite.setScale(1);\n                        this.selectedGem = null;\n                    } else {\n                        if (this.areNext(pickedGem, this.selectedGem)) {\n                            this.selectedGem.gemSprite.setScale(1);\n                            this.swapGems(this.selectedGem, pickedGem, true);\n                        } else {\n                            this.selectedGem.gemSprite.setScale(1);\n                            pickedGem.gemSprite.setScale(1.2);\n                            this.selectedGem = pickedGem;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    startSwipe(pointer) {\n        if (this.dragging && this.selectedGem != null) {\n            let deltaX = pointer.downX - pointer.x;\n            let deltaY = pointer.downY - pointer.y;\n            let deltaRow = 0;\n            let deltaCol = 0;\n            if (deltaX > this.gemSize / 2 && Math.abs(deltaY) < this.gemSize / 4) {\n                deltaCol = -1;\n            }\n            if (deltaX < -this.gemSize / 2 && Math.abs(deltaY) < this.gemSize / 4) {\n                deltaCol = 1;\n            }\n            if (deltaY > this.gemSize / 2 && Math.abs(deltaX) < this.gemSize / 4) {\n                deltaRow = -1;\n            }\n            if (deltaY < -this.gemSize / 2 && Math.abs(deltaX) < this.gemSize / 4) {\n                deltaRow = 1;\n            }\n            if (deltaRow + deltaCol != 0) {\n                let pickedGem = this.gemAt(this.getGemRow(this.selectedGem) + deltaRow, this.getGemCol(this.selectedGem) + deltaCol);\n                if (pickedGem != -1) {\n                    this.selectedGem.gemSprite.setScale(1);\n                    this.swapGems(this.selectedGem, pickedGem, true);\n                    this.dragging = false;\n                }\n            }\n        }\n    }\n    stopSwipe() {\n        this.dragging = false;\n    }\n    areTheSame(gem1, gem2) {\n        return this.getGemRow(gem1) == this.getGemRow(gem2) && this.getGemCol(gem1) == this.getGemCol(gem2);\n    }\n    getGemRow(gem) {\n        return Math.floor(gem.gemSprite.y / this.gemSize);\n    }\n    getGemCol(gem) {\n        return Math.floor(gem.gemSprite.x / this.gemSize);\n    }\n    areNext(gem1, gem2) {\n        return Math.abs(this.getGemRow(gem1) - this.getGemRow(gem2)) + Math.abs(this.getGemCol(gem1) - this.getGemCol(gem2)) == 1;\n    }\n    swapGems(gem1, gem2, swapBack) {\n        this.swappingGems = 2;\n        this.canPick = false;\n        let fromColor = gem1.gemColor;\n        let fromSprite = gem1.gemSprite;\n        let toColor = gem2.gemColor;\n        let toSprite = gem2.gemSprite;\n        let gem1Row = this.getGemRow(gem1);\n        let gem1Col = this.getGemCol(gem1);\n        let gem2Row = this.getGemRow(gem2);\n        let gem2Col = this.getGemCol(gem2);\n        this.gameArray[gem1Row][gem1Col].gemColor = toColor;\n        this.gameArray[gem1Row][gem1Col].gemSprite = toSprite;\n        this.gameArray[gem2Row][gem2Col].gemColor = fromColor;\n        this.gameArray[gem2Row][gem2Col].gemSprite = fromSprite;\n        this.tweenGem(gem1, gem2, swapBack);\n        this.tweenGem(gem2, gem1, swapBack);\n    }\n    tweenGem(gem1, gem2, swapBack) {\n        let row = this.getGemRow(gem1);\n        let col = this.getGemCol(gem1);\n        this.scene.tweens.add({\n            targets: this.gameArray[row][col].gemSprite,\n            x: col * this.gemSize + this.gemSize / 2,\n            y: row * this.gemSize + this.gemSize / 2,\n            duration: this.swapSpeed,\n            callbackScope: this,\n            onComplete: function() {\n                this.swappingGems--;\n                if (this.swappingGems == 0) {\n                    if (!this.matchInBoard() && swapBack) {\n                        this.swapGems(gem1, gem2, false);\n                    } else {\n                        if (this.matchInBoard()) {\n                            this.handleMatches();\n                        } else {\n                            this.canPick = true;\n                            this.selectedGem = null;\n                        }\n                    }\n                }\n            }\n        });\n    }\n    matchInBoard() {\n        for(let i = 0; i < this.fieldSize; i++){\n            for(let j = 0; j < this.fieldSize; j++){\n                if (this.isMatch(i, j)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    handleMatches() {\n        this.removeMap = [];\n        for(let i = 0; i < this.fieldSize; i++){\n            this.removeMap[i] = [];\n            for(let j = 0; j < this.fieldSize; j++){\n                this.removeMap[i].push(0);\n            }\n        }\n        this.markMatches(\"horizontal\");\n        this.markMatches(\"vertical\");\n        this.destroyGems();\n    }\n    markMatches(direction) {\n        for(let i = 0; i < this.fieldSize; i++){\n            let colorStreak = 1;\n            let currentColor = -1;\n            let startStreak = 0;\n            let colorToWatch = 0;\n            for(let j = 0; j < this.fieldSize; j++){\n                if (direction == \"horizontal\") {\n                    colorToWatch = this.gemAt(i, j).gemColor;\n                } else {\n                    colorToWatch = this.gemAt(j, i).gemColor;\n                }\n                if (colorToWatch == currentColor) {\n                    colorStreak++;\n                }\n                if (colorToWatch != currentColor || j == this.fieldSize - 1) {\n                    if (colorStreak >= 3) {\n                        if (direction == \"horizontal\") {\n                            console.log(\"HORIZONTAL :: Length = \" + colorStreak + \" :: Start = (\" + i + \",\" + startStreak + \") :: Color = \" + currentColor);\n                        } else {\n                            console.log(\"VERTICAL :: Length = \" + colorStreak + \" :: Start = (\" + startStreak + \",\" + i + \") :: Color = \" + currentColor);\n                        }\n                        for(let k = 0; k < colorStreak; k++){\n                            if (direction == \"horizontal\") {\n                                this.removeMap[i][startStreak + k]++;\n                            } else {\n                                this.removeMap[startStreak + k][i]++;\n                            }\n                        }\n                    }\n                    startStreak = j;\n                    colorStreak = 1;\n                    currentColor = colorToWatch;\n                }\n            }\n        }\n    }\n    destroyGems() {\n        let destroyed = 0;\n        for(let i = 0; i < this.fieldSize; i++){\n            for(let j = 0; j < this.fieldSize; j++){\n                if (this.removeMap[i][j] > 0) {\n                    destroyed++;\n                    this.scene.tweens.add({\n                        targets: this.gameArray[i][j].gemSprite,\n                        alpha: 0.5,\n                        duration: this.destroySpeed,\n                        callbackScope: this,\n                        onComplete: function() {\n                            destroyed--;\n                            this.gameArray[i][j].gemSprite.visible = false;\n                            this.poolArray.push(this.gameArray[i][j].gemSprite);\n                            if (destroyed == 0) {\n                                this.makeGemsFall();\n                                this.replenishField();\n                            }\n                        }\n                    });\n                    this.gameArray[i][j].isEmpty = true;\n                }\n            }\n        }\n    }\n    makeGemsFall() {\n        for(let i = this.fieldSize - 2; i >= 0; i--){\n            for(let j = 0; j < this.fieldSize; j++){\n                if (!this.gameArray[i][j].isEmpty) {\n                    let fallTiles = this.holesBelow(i, j);\n                    if (fallTiles > 0) {\n                        this.scene.tweens.add({\n                            targets: this.gameArray[i][j].gemSprite,\n                            y: this.gameArray[i][j].gemSprite.y + fallTiles * this.gemSize,\n                            duration: this.fallSpeed * fallTiles\n                        });\n                        this.gameArray[i + fallTiles][j] = {\n                            gemSprite: this.gameArray[i][j].gemSprite,\n                            gemColor: this.gameArray[i][j].gemColor,\n                            isEmpty: false\n                        };\n                        this.gameArray[i][j].isEmpty = true;\n                    }\n                }\n            }\n        }\n    }\n    holesBelow(row, col) {\n        let result = 0;\n        for(let i = row + 1; i < this.fieldSize; i++){\n            if (this.gameArray[i][col].isEmpty) {\n                result++;\n            }\n        }\n        return result;\n    }\n    replenishField() {\n        let replenished = 0;\n        for(let j = 0; j < this.fieldSize; j++){\n            let emptySpots = this.holesInCol(j);\n            if (emptySpots > 0) {\n                for(let i = 0; i < emptySpots; i++){\n                    replenished++;\n                    let randomColor = this.randomColor();\n                    this.gameArray[i][j].gemColor = randomColor;\n                    this.gameArray[i][j].gemSprite = this.poolArray.pop();\n                    this.gameArray[i][j].gemSprite.setTexture(randomColor);\n                    this.gameArray[i][j].gemSprite.visible = true;\n                    this.gameArray[i][j].gemSprite.x = this.gemSize * j + this.gemSize / 2;\n                    this.gameArray[i][j].gemSprite.y = this.gemSize / 2 - (emptySpots - i) * this.gemSize;\n                    this.gameArray[i][j].gemSprite.alpha = 1;\n                    this.gameArray[i][j].isEmpty = false;\n                    this.scene.tweens.add({\n                        targets: this.gameArray[i][j].gemSprite,\n                        y: this.gemSize * i + this.gemSize / 2,\n                        duration: this.fallSpeed * emptySpots,\n                        callbackScope: this,\n                        onComplete: function() {\n                            replenished--;\n                            if (replenished == 0) {\n                                if (this.matchInBoard()) {\n                                    this.time.addEvent({\n                                        delay: 250,\n                                        callback: this.handleMatches()\n                                    });\n                                } else {\n                                    this.canPick = true;\n                                    this.selectedGem = null;\n                                }\n                            }\n                        }\n                    });\n                }\n            }\n        }\n    }\n    holesInCol(col) {\n        var result = 0;\n        for(let i = 0; i < this.fieldSize; i++){\n            if (this.gameArray[i][col].isEmpty) {\n                result++;\n            }\n        }\n        return result;\n    }\n    randomColor() {\n        return this.gemColors[Phaser.Math.Between(0, this.gemColors.length - 1)];\n    }\n    constructor(scene){\n        //\n        this.fieldSize = 7;\n        this.gemSize = 100;\n        this.swapSpeed = 200;\n        this.fallSpeed = 100;\n        this.destroySpeed = 200;\n        this.gemColors = [\n            \"blue\",\n            \"green\",\n            \"orange\",\n            \"red\"\n        ];\n        //\n        this.canPick = true;\n        this.dragging = false;\n        //\n        this.gameArray = [];\n        this.poolArray = [];\n        this.scene = scene;\n        this.drawField();\n    }\n}\n\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LFVBQW1CO2FBQ25CQyxXQUFvQjtRQUNwQixFQUFFO2FBQ0YxQixZQUFpQixFQUFFO2FBQ25CQyxZQUFpQixFQUFFO1FBUWYsSUFBSSxDQUFDRSxLQUFLLEdBQUdBO1FBRWIsSUFBSSxDQUFDSixTQUFTO0lBQ2xCO0FBK1ZKO0FBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vc3JjL2dhbWUvY29tcG9uZW50cy9NYXRjaC50cz84NmEyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEdhbWUsIEdhbWVPYmplY3RzLCBTY2VuZSB9IGZyb20gXCJwaGFzZXJcIjtcblxuY2xhc3MgR2Vte1xuICAgIGdlbUNvbG9yOiBzdHJpbmdcbiAgICBnZW1TcHJpdGU6IEdhbWVPYmplY3RzLlNwcml0ZVxuICAgIGlzRW1wdHk6IGJvb2xlYW5cbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTWF0Y2h7XG5cbiAgICBzY2VuZTogUGhhc2VyLlNjZW5lXG4gICAgLy9cbiAgICBmaWVsZFNpemU6IG51bWJlciA9IDdcbiAgICBnZW1TaXplOiBudW1iZXIgPSAxMDBcbiAgICBzd2FwU3BlZWQ6IG51bWJlciA9IDIwMFxuICAgIGZhbGxTcGVlZDogbnVtYmVyID0gMTAwXG4gICAgZGVzdHJveVNwZWVkOiBudW1iZXIgPSAyMDBcbiAgICBnZW1Db2xvcnM6IHN0cmluZ1tdID0gWydibHVlJywnZ3JlZW4nLCdvcmFuZ2UnLCdyZWQnXVxuICAgIC8vXG4gICAgY2FuUGljazogYm9vbGVhbiA9IHRydWVcbiAgICBkcmFnZ2luZzogYm9vbGVhbiA9IGZhbHNlXG4gICAgLy9cbiAgICBnYW1lQXJyYXk6IGFueSA9IFtdXG4gICAgcG9vbEFycmF5OiBhbnkgPSBbXVxuICAgIGdlbUdyb3VwOiBHYW1lT2JqZWN0cy5Hcm91cFxuICAgIC8vXG4gICAgc2VsZWN0ZWRHZW06IEdlbSB8IG51bGxcbiAgICBzd2FwcGluZ0dlbXM6IG51bWJlclxuICAgIHJlbW92ZU1hcDogYW55XG5cbiAgICBjb25zdHJ1Y3RvcihzY2VuZTpTY2VuZSl7XG4gICAgICAgIHRoaXMuc2NlbmUgPSBzY2VuZVxuXG4gICAgICAgIHRoaXMuZHJhd0ZpZWxkKCk7XG4gICAgfVxuXG4gICAgZHJhd0ZpZWxkKCl7XG4gICAgICAgIHRoaXMuZ2FtZUFycmF5ID0gW107XG4gICAgICAgIHRoaXMucG9vbEFycmF5ID0gW107XG4gICAgICAgIHRoaXMuZ2VtR3JvdXAgPSB0aGlzLnNjZW5lLmFkZC5ncm91cCgpO1xuICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgdGhpcy5maWVsZFNpemU7IGkgKyspe1xuICAgICAgICAgICAgdGhpcy5nYW1lQXJyYXlbaV0gPSBbXTtcbiAgICAgICAgICAgIGZvcihsZXQgaiA9IDA7IGogPCB0aGlzLmZpZWxkU2l6ZTsgaiArKyl7XG4gICAgICAgICAgICAgICAgbGV0IGNvbG9yID0gdGhpcy5yYW5kb21Db2xvcigpXG4gICAgICAgICAgICAgICAgbGV0IGdlbSA9IHRoaXMuc2NlbmUuYWRkLnNwcml0ZSh0aGlzLmdlbVNpemUgKiBqICsgdGhpcy5nZW1TaXplIC8gMiwgdGhpcy5nZW1TaXplICogaSArIHRoaXMuZ2VtU2l6ZSAvIDIsIGNvbG9yKTtcbiAgICAgICAgICAgICAgICB0aGlzLmdlbUdyb3VwLmFkZChnZW0pO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5nYW1lQXJyYXlbaV1bal0gPSB7XG4gICAgICAgICAgICAgICAgICAgIGdlbUNvbG9yOiBjb2xvcixcbiAgICAgICAgICAgICAgICAgICAgZ2VtU3ByaXRlOiBnZW0sXG4gICAgICAgICAgICAgICAgICAgIGlzRW1wdHk6IGZhbHNlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgaXNNYXRjaChyb3c6bnVtYmVyLCBjb2w6bnVtYmVyKTogYm9vbGVhbntcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNIb3Jpem9udGFsTWF0Y2gocm93LCBjb2wpIHx8IHRoaXMuaXNWZXJ0aWNhbE1hdGNoKHJvdywgY29sKTtcbiAgICB9XG5cbiAgICBpc0hvcml6b250YWxNYXRjaChyb3c6IG51bWJlciwgY29sOiBudW1iZXIpOiBib29sZWFue1xuICAgICAgICByZXR1cm4gdGhpcy5nZW1BdChyb3csIGNvbCkuZ2VtQ29sb3IgPT0gdGhpcy5nZW1BdChyb3csIGNvbCAtIDEpLmdlbUNvbG9yICYmIHRoaXMuZ2VtQXQocm93LCBjb2wpLmdlbUNvbG9yID09IHRoaXMuZ2VtQXQocm93LCBjb2wgLSAyKS5nZW1Db2xvcjtcbiAgICB9XG5cbiAgICBpc1ZlcnRpY2FsTWF0Y2gocm93OiBudW1iZXIsIGNvbDogbnVtYmVyKTogYm9vbGVhbntcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdlbUF0KHJvdywgY29sKS5nZW1Db2xvciA9PSB0aGlzLmdlbUF0KHJvdyAtIDEsIGNvbCkuZ2VtQ29sb3IgJiYgdGhpcy5nZW1BdChyb3csIGNvbCkuZ2VtQ29sb3IgPT0gdGhpcy5nZW1BdChyb3cgLSAyLCBjb2wpLmdlbUNvbG9yO1xuICAgIH1cbiAgICBcbiAgICBnZW1BdChyb3c6IG51bWJlciwgY29sOiBudW1iZXIpOiBhbnl7XG4gICAgICAgIGlmKHJvdyA8IDAgfHwgcm93ID49IHRoaXMuZmllbGRTaXplIHx8IGNvbCA8IDAgfHwgY29sID49IHRoaXMuZmllbGRTaXplKXtcbiAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5nYW1lQXJyYXlbcm93XVtjb2xdO1xuICAgIH1cblxuICAgIGdlbVNlbGVjdChwb2ludGVyOiBQaGFzZXIuSW5wdXQuUG9pbnRlcil7XG4gICAgICAgIGlmKHRoaXMuY2FuUGljayl7XG4gICAgICAgICAgICB0aGlzLmRyYWdnaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgIGxldCByb3cgPSBNYXRoLmZsb29yKHBvaW50ZXIueSAvIHRoaXMuZ2VtU2l6ZSk7XG4gICAgICAgICAgICBsZXQgY29sID0gTWF0aC5mbG9vcihwb2ludGVyLnggLyB0aGlzLmdlbVNpemUpO1xuICAgICAgICAgICAgbGV0IHBpY2tlZEdlbSA9IHRoaXMuZ2VtQXQocm93LCBjb2wpXG4gICAgICAgICAgICBpZihwaWNrZWRHZW0gIT0gLTEpe1xuICAgICAgICAgICAgICAgIGlmKHRoaXMuc2VsZWN0ZWRHZW0gPT0gbnVsbCl7XG4gICAgICAgICAgICAgICAgICAgIHBpY2tlZEdlbS5nZW1TcHJpdGUuc2V0U2NhbGUoMS4yKTtcbiAgICAgICAgICAgICAgICAgICAgcGlja2VkR2VtLmdlbVNwcml0ZS5zZXREZXB0aCgxKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZEdlbSA9IHBpY2tlZEdlbTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgaWYodGhpcy5hcmVUaGVTYW1lKHBpY2tlZEdlbSwgdGhpcy5zZWxlY3RlZEdlbSkpe1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZEdlbS5nZW1TcHJpdGUuc2V0U2NhbGUoMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkR2VtID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYodGhpcy5hcmVOZXh0KHBpY2tlZEdlbSwgdGhpcy5zZWxlY3RlZEdlbSkpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRHZW0uZ2VtU3ByaXRlLnNldFNjYWxlKDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3dhcEdlbXModGhpcy5zZWxlY3RlZEdlbSwgcGlja2VkR2VtLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZEdlbS5nZW1TcHJpdGUuc2V0U2NhbGUoMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGlja2VkR2VtLmdlbVNwcml0ZS5zZXRTY2FsZSgxLjIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRHZW0gPSBwaWNrZWRHZW07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzdGFydFN3aXBlKHBvaW50ZXI6IFBoYXNlci5JbnB1dC5Qb2ludGVyKXtcbiAgICAgICAgaWYodGhpcy5kcmFnZ2luZyAmJiB0aGlzLnNlbGVjdGVkR2VtICE9IG51bGwpe1xuICAgICAgICAgICAgbGV0IGRlbHRhWCA9IHBvaW50ZXIuZG93blggLSBwb2ludGVyLng7XG4gICAgICAgICAgICBsZXQgZGVsdGFZID0gcG9pbnRlci5kb3duWSAtIHBvaW50ZXIueTtcbiAgICAgICAgICAgIGxldCBkZWx0YVJvdyA9IDA7XG4gICAgICAgICAgICBsZXQgZGVsdGFDb2wgPSAwO1xuICAgICAgICAgICAgaWYoZGVsdGFYID4gdGhpcy5nZW1TaXplIC8gMiAmJiBNYXRoLmFicyhkZWx0YVkpIDwgdGhpcy5nZW1TaXplIC8gNCl7XG4gICAgICAgICAgICAgICAgZGVsdGFDb2wgPSAtMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmKGRlbHRhWCA8IC10aGlzLmdlbVNpemUgLyAyICYmIE1hdGguYWJzKGRlbHRhWSkgPCB0aGlzLmdlbVNpemUgLyA0KXtcbiAgICAgICAgICAgICAgICBkZWx0YUNvbCA9IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZihkZWx0YVkgPiB0aGlzLmdlbVNpemUgLyAyICYmIE1hdGguYWJzKGRlbHRhWCkgPCB0aGlzLmdlbVNpemUgLyA0KXtcbiAgICAgICAgICAgICAgICBkZWx0YVJvdyA9IC0xO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYoZGVsdGFZIDwgLXRoaXMuZ2VtU2l6ZSAvIDIgJiYgTWF0aC5hYnMoZGVsdGFYKSA8IHRoaXMuZ2VtU2l6ZSAvIDQpe1xuICAgICAgICAgICAgICAgIGRlbHRhUm93ID0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmKGRlbHRhUm93ICsgZGVsdGFDb2wgIT0gMCl7XG4gICAgICAgICAgICAgICAgbGV0IHBpY2tlZEdlbSA9IHRoaXMuZ2VtQXQodGhpcy5nZXRHZW1Sb3codGhpcy5zZWxlY3RlZEdlbSkgKyBkZWx0YVJvdywgdGhpcy5nZXRHZW1Db2wodGhpcy5zZWxlY3RlZEdlbSkgKyBkZWx0YUNvbCk7XG4gICAgICAgICAgICAgICAgaWYocGlja2VkR2VtICE9IC0xKXtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZEdlbS5nZW1TcHJpdGUuc2V0U2NhbGUoMSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3dhcEdlbXModGhpcy5zZWxlY3RlZEdlbSwgcGlja2VkR2VtLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kcmFnZ2luZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHN0b3BTd2lwZSgpe1xuICAgICAgICB0aGlzLmRyYWdnaW5nID0gZmFsc2U7XG4gICAgfVxuXG4gICAgYXJlVGhlU2FtZShnZW0xOiBHZW0sIGdlbTI6IEdlbSl7XG4gICAgICAgIHJldHVybiB0aGlzLmdldEdlbVJvdyhnZW0xKSA9PSB0aGlzLmdldEdlbVJvdyhnZW0yKSAmJiB0aGlzLmdldEdlbUNvbChnZW0xKSA9PSB0aGlzLmdldEdlbUNvbChnZW0yKTtcbiAgICB9XG5cbiAgICBnZXRHZW1Sb3coZ2VtOiBHZW0pe1xuICAgICAgICByZXR1cm4gTWF0aC5mbG9vcihnZW0uZ2VtU3ByaXRlLnkgLyB0aGlzLmdlbVNpemUpO1xuICAgIH1cblxuICAgIGdldEdlbUNvbChnZW06IEdlbSl7XG4gICAgICAgIHJldHVybiBNYXRoLmZsb29yKGdlbS5nZW1TcHJpdGUueCAvIHRoaXMuZ2VtU2l6ZSk7XG4gICAgfVxuXG4gICAgYXJlTmV4dChnZW0xOiBHZW0sIGdlbTI6IEdlbSl7XG4gICAgICAgIHJldHVybiBNYXRoLmFicyh0aGlzLmdldEdlbVJvdyhnZW0xKSAtIHRoaXMuZ2V0R2VtUm93KGdlbTIpKSArIE1hdGguYWJzKHRoaXMuZ2V0R2VtQ29sKGdlbTEpIC0gdGhpcy5nZXRHZW1Db2woZ2VtMikpID09IDE7XG4gICAgfVxuXG4gICAgc3dhcEdlbXMoZ2VtMTogR2VtLCBnZW0yOiBHZW0sIHN3YXBCYWNrOiBib29sZWFuKXtcbiAgICAgICAgdGhpcy5zd2FwcGluZ0dlbXMgPSAyO1xuICAgICAgICB0aGlzLmNhblBpY2sgPSBmYWxzZTtcbiAgICAgICAgbGV0IGZyb21Db2xvciA9IGdlbTEuZ2VtQ29sb3I7XG4gICAgICAgIGxldCBmcm9tU3ByaXRlID0gZ2VtMS5nZW1TcHJpdGU7XG4gICAgICAgIGxldCB0b0NvbG9yID0gZ2VtMi5nZW1Db2xvcjtcbiAgICAgICAgbGV0IHRvU3ByaXRlID0gZ2VtMi5nZW1TcHJpdGU7XG4gICAgICAgIGxldCBnZW0xUm93ID0gdGhpcy5nZXRHZW1Sb3coZ2VtMSk7XG4gICAgICAgIGxldCBnZW0xQ29sID0gdGhpcy5nZXRHZW1Db2woZ2VtMSk7XG4gICAgICAgIGxldCBnZW0yUm93ID0gdGhpcy5nZXRHZW1Sb3coZ2VtMik7XG4gICAgICAgIGxldCBnZW0yQ29sID0gdGhpcy5nZXRHZW1Db2woZ2VtMik7XG4gICAgICAgIHRoaXMuZ2FtZUFycmF5W2dlbTFSb3ddW2dlbTFDb2xdLmdlbUNvbG9yID0gdG9Db2xvcjtcbiAgICAgICAgdGhpcy5nYW1lQXJyYXlbZ2VtMVJvd11bZ2VtMUNvbF0uZ2VtU3ByaXRlID0gdG9TcHJpdGU7XG4gICAgICAgIHRoaXMuZ2FtZUFycmF5W2dlbTJSb3ddW2dlbTJDb2xdLmdlbUNvbG9yID0gZnJvbUNvbG9yO1xuICAgICAgICB0aGlzLmdhbWVBcnJheVtnZW0yUm93XVtnZW0yQ29sXS5nZW1TcHJpdGUgPSBmcm9tU3ByaXRlO1xuICAgICAgICB0aGlzLnR3ZWVuR2VtKGdlbTEsIGdlbTIsIHN3YXBCYWNrKTtcbiAgICAgICAgdGhpcy50d2VlbkdlbShnZW0yLCBnZW0xLCBzd2FwQmFjayk7XG4gICAgfVxuXG4gICAgdHdlZW5HZW0oZ2VtMTogR2VtLCBnZW0yOiBHZW0sIHN3YXBCYWNrOiBib29sZWFuKXtcbiAgICAgICAgbGV0IHJvdyA9IHRoaXMuZ2V0R2VtUm93KGdlbTEpO1xuICAgICAgICBsZXQgY29sID0gdGhpcy5nZXRHZW1Db2woZ2VtMSk7XG4gICAgICAgIHRoaXMuc2NlbmUudHdlZW5zLmFkZCh7XG4gICAgICAgICAgICB0YXJnZXRzOiB0aGlzLmdhbWVBcnJheVtyb3ddW2NvbF0uZ2VtU3ByaXRlLFxuICAgICAgICAgICAgeDogY29sICogdGhpcy5nZW1TaXplICsgdGhpcy5nZW1TaXplIC8gMixcbiAgICAgICAgICAgIHk6IHJvdyAqIHRoaXMuZ2VtU2l6ZSArIHRoaXMuZ2VtU2l6ZSAvIDIsXG4gICAgICAgICAgICBkdXJhdGlvbjogdGhpcy5zd2FwU3BlZWQsXG4gICAgICAgICAgICBjYWxsYmFja1Njb3BlOiB0aGlzLFxuICAgICAgICAgICAgb25Db21wbGV0ZTogZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICB0aGlzLnN3YXBwaW5nR2VtcyAtLTtcbiAgICAgICAgICAgICAgICBpZih0aGlzLnN3YXBwaW5nR2VtcyA9PSAwKXtcbiAgICAgICAgICAgICAgICAgICAgaWYoIXRoaXMubWF0Y2hJbkJvYXJkKCkgJiYgc3dhcEJhY2spe1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zd2FwR2VtcyhnZW0xLCBnZW0yLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKHRoaXMubWF0Y2hJbkJvYXJkKCkpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaGFuZGxlTWF0Y2hlcygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNhblBpY2sgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRHZW0gPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBtYXRjaEluQm9hcmQoKXtcbiAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IHRoaXMuZmllbGRTaXplOyBpICsrKXtcbiAgICAgICAgICAgIGZvcihsZXQgaiA9IDA7IGogPCB0aGlzLmZpZWxkU2l6ZTsgaiArKyl7XG4gICAgICAgICAgICAgICAgaWYodGhpcy5pc01hdGNoKGksIGopKXtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBoYW5kbGVNYXRjaGVzKCl7XG4gICAgICAgIHRoaXMucmVtb3ZlTWFwID0gW107XG4gICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCB0aGlzLmZpZWxkU2l6ZTsgaSArKyl7XG4gICAgICAgICAgICB0aGlzLnJlbW92ZU1hcFtpXSA9IFtdO1xuICAgICAgICAgICAgZm9yKGxldCBqID0gMDsgaiA8IHRoaXMuZmllbGRTaXplOyBqICsrKXtcbiAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZU1hcFtpXS5wdXNoKDApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMubWFya01hdGNoZXMoJ2hvcml6b250YWwnKTtcbiAgICAgICAgdGhpcy5tYXJrTWF0Y2hlcygndmVydGljYWwnKTtcbiAgICAgICAgdGhpcy5kZXN0cm95R2VtcygpO1xuICAgIH1cblxuICAgIG1hcmtNYXRjaGVzKGRpcmVjdGlvbjogc3RyaW5nKXtcbiAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IHRoaXMuZmllbGRTaXplOyBpICsrKXtcbiAgICAgICAgICAgIGxldCBjb2xvclN0cmVhayA9IDE7XG4gICAgICAgICAgICBsZXQgY3VycmVudENvbG9yID0gLTE7XG4gICAgICAgICAgICBsZXQgc3RhcnRTdHJlYWsgPSAwO1xuICAgICAgICAgICAgbGV0IGNvbG9yVG9XYXRjaCA9IDA7XG4gICAgICAgICAgICBmb3IobGV0IGogPSAwOyBqIDwgdGhpcy5maWVsZFNpemU7IGogKyspe1xuICAgICAgICAgICAgICAgIGlmKGRpcmVjdGlvbiA9PSAnaG9yaXpvbnRhbCcpe1xuICAgICAgICAgICAgICAgICAgICBjb2xvclRvV2F0Y2ggPSB0aGlzLmdlbUF0KGksIGopLmdlbUNvbG9yO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgICAgICBjb2xvclRvV2F0Y2ggPSB0aGlzLmdlbUF0KGosIGkpLmdlbUNvbG9yO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZihjb2xvclRvV2F0Y2ggPT0gY3VycmVudENvbG9yKXtcbiAgICAgICAgICAgICAgICAgICAgY29sb3JTdHJlYWsgKys7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmKGNvbG9yVG9XYXRjaCAhPSBjdXJyZW50Q29sb3IgfHwgaiA9PSB0aGlzLmZpZWxkU2l6ZSAtIDEpe1xuICAgICAgICAgICAgICAgICAgICBpZihjb2xvclN0cmVhayA+PSAzKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKGRpcmVjdGlvbiA9PSAnaG9yaXpvbnRhbCcpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiSE9SSVpPTlRBTCA6OiBMZW5ndGggPSBcIiArIGNvbG9yU3RyZWFrICsgXCIgOjogU3RhcnQgPSAoXCIgKyBpICsgXCIsXCIgKyBzdGFydFN0cmVhayArIFwiKSA6OiBDb2xvciA9IFwiICsgY3VycmVudENvbG9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJWRVJUSUNBTCA6OiBMZW5ndGggPSBcIiArIGNvbG9yU3RyZWFrICsgXCIgOjogU3RhcnQgPSAoXCIgKyBzdGFydFN0cmVhayArIFwiLFwiICsgaSArIFwiKSA6OiBDb2xvciA9IFwiICsgY3VycmVudENvbG9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGZvcihsZXQgayA9IDA7IGsgPCBjb2xvclN0cmVhazsgayArKyl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoZGlyZWN0aW9uID09ICdob3Jpem9udGFsJyl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlTWFwW2ldW3N0YXJ0U3RyZWFrICsga10gKys7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlTWFwW3N0YXJ0U3RyZWFrICsga11baV0gKys7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0U3RyZWFrID0gajtcbiAgICAgICAgICAgICAgICAgICAgY29sb3JTdHJlYWsgPSAxO1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50Q29sb3IgPSBjb2xvclRvV2F0Y2g7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZGVzdHJveUdlbXMoKXtcbiAgICAgICAgbGV0IGRlc3Ryb3llZCA9IDA7XG4gICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCB0aGlzLmZpZWxkU2l6ZTsgaSArKyl7XG4gICAgICAgICAgICBmb3IobGV0IGogPSAwOyBqIDwgdGhpcy5maWVsZFNpemU7IGogKyspe1xuICAgICAgICAgICAgICAgIGlmKHRoaXMucmVtb3ZlTWFwW2ldW2pdID4gMCl7XG4gICAgICAgICAgICAgICAgICAgIGRlc3Ryb3llZCArKztcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zY2VuZS50d2VlbnMuYWRkKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldHM6IHRoaXMuZ2FtZUFycmF5W2ldW2pdLmdlbVNwcml0ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFscGhhOiAwLjUsXG4gICAgICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogdGhpcy5kZXN0cm95U3BlZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFja1Njb3BlOiB0aGlzLFxuICAgICAgICAgICAgICAgICAgICAgICAgb25Db21wbGV0ZTogZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXN0cm95ZWQgLS07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5nYW1lQXJyYXlbaV1bal0uZ2VtU3ByaXRlLnZpc2libGUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBvb2xBcnJheS5wdXNoKHRoaXMuZ2FtZUFycmF5W2ldW2pdLmdlbVNwcml0ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoZGVzdHJveWVkID09IDApe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1ha2VHZW1zRmFsbCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlcGxlbmlzaEZpZWxkKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5nYW1lQXJyYXlbaV1bal0uaXNFbXB0eSA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgbWFrZUdlbXNGYWxsKCl7XG4gICAgICAgIGZvcihsZXQgaSA9IHRoaXMuZmllbGRTaXplIC0gMjsgaSA+PSAwOyBpIC0tKXtcbiAgICAgICAgICAgIGZvcihsZXQgaiA9IDA7IGogPCB0aGlzLmZpZWxkU2l6ZTsgaiArKyl7XG4gICAgICAgICAgICAgICAgaWYoIXRoaXMuZ2FtZUFycmF5W2ldW2pdLmlzRW1wdHkpe1xuICAgICAgICAgICAgICAgICAgICBsZXQgZmFsbFRpbGVzID0gdGhpcy5ob2xlc0JlbG93KGksIGopO1xuICAgICAgICAgICAgICAgICAgICBpZihmYWxsVGlsZXMgPiAwKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2NlbmUudHdlZW5zLmFkZCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0czogdGhpcy5nYW1lQXJyYXlbaV1bal0uZ2VtU3ByaXRlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHk6IHRoaXMuZ2FtZUFycmF5W2ldW2pdLmdlbVNwcml0ZS55ICsgZmFsbFRpbGVzICogdGhpcy5nZW1TaXplLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uOiB0aGlzLmZhbGxTcGVlZCAqIGZhbGxUaWxlc1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmdhbWVBcnJheVtpICsgZmFsbFRpbGVzXVtqXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZW1TcHJpdGU6IHRoaXMuZ2FtZUFycmF5W2ldW2pdLmdlbVNwcml0ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZW1Db2xvcjogdGhpcy5nYW1lQXJyYXlbaV1bal0uZ2VtQ29sb3IsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNFbXB0eTogZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZ2FtZUFycmF5W2ldW2pdLmlzRW1wdHkgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgaG9sZXNCZWxvdyhyb3c6IG51bWJlciwgY29sOiBudW1iZXIpe1xuICAgICAgICBsZXQgcmVzdWx0ID0gMDtcbiAgICAgICAgZm9yKGxldCBpID0gcm93ICsgMTsgaSA8IHRoaXMuZmllbGRTaXplOyBpICsrKXtcbiAgICAgICAgICAgIGlmKHRoaXMuZ2FtZUFycmF5W2ldW2NvbF0uaXNFbXB0eSl7XG4gICAgICAgICAgICAgICAgcmVzdWx0ICsrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgcmVwbGVuaXNoRmllbGQoKXtcbiAgICAgICAgbGV0IHJlcGxlbmlzaGVkID0gMDtcbiAgICAgICAgZm9yKGxldCBqID0gMDsgaiA8IHRoaXMuZmllbGRTaXplOyBqICsrKXtcbiAgICAgICAgICAgIGxldCBlbXB0eVNwb3RzID0gdGhpcy5ob2xlc0luQ29sKGopO1xuICAgICAgICAgICAgaWYoZW1wdHlTcG90cyA+IDApe1xuICAgICAgICAgICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBlbXB0eVNwb3RzOyBpICsrKXtcbiAgICAgICAgICAgICAgICAgICAgcmVwbGVuaXNoZWQgKys7XG4gICAgICAgICAgICAgICAgICAgIGxldCByYW5kb21Db2xvciA9IHRoaXMucmFuZG9tQ29sb3IoKVxuICAgICAgICAgICAgICAgICAgICB0aGlzLmdhbWVBcnJheVtpXVtqXS5nZW1Db2xvciA9IHJhbmRvbUNvbG9yO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmdhbWVBcnJheVtpXVtqXS5nZW1TcHJpdGUgPSB0aGlzLnBvb2xBcnJheS5wb3AoKVxuICAgICAgICAgICAgICAgICAgICB0aGlzLmdhbWVBcnJheVtpXVtqXS5nZW1TcHJpdGUuc2V0VGV4dHVyZShyYW5kb21Db2xvcik7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ2FtZUFycmF5W2ldW2pdLmdlbVNwcml0ZS52aXNpYmxlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5nYW1lQXJyYXlbaV1bal0uZ2VtU3ByaXRlLnggPSB0aGlzLmdlbVNpemUgKiBqICsgdGhpcy5nZW1TaXplIC8gMjtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5nYW1lQXJyYXlbaV1bal0uZ2VtU3ByaXRlLnkgPSB0aGlzLmdlbVNpemUgLyAyIC0gKGVtcHR5U3BvdHMgLSBpKSAqIHRoaXMuZ2VtU2l6ZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5nYW1lQXJyYXlbaV1bal0uZ2VtU3ByaXRlLmFscGhhID0gMTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5nYW1lQXJyYXlbaV1bal0uaXNFbXB0eSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNjZW5lLnR3ZWVucy5hZGQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0czogdGhpcy5nYW1lQXJyYXlbaV1bal0uZ2VtU3ByaXRlLFxuICAgICAgICAgICAgICAgICAgICAgICAgeTogdGhpcy5nZW1TaXplICogaSArIHRoaXMuZ2VtU2l6ZSAvIDIsXG4gICAgICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogdGhpcy5mYWxsU3BlZWQgKiBlbXB0eVNwb3RzLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2tTY29wZTogdGhpcyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uQ29tcGxldGU6IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVwbGVuaXNoZWQgLS07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYocmVwbGVuaXNoZWQgPT0gMCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKHRoaXMubWF0Y2hJbkJvYXJkKCkpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50aW1lLmFkZEV2ZW50KHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxheTogMjUwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrOiB0aGlzLmhhbmRsZU1hdGNoZXMoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2FuUGljayA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkR2VtID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgaG9sZXNJbkNvbChjb2w6IG51bWJlcil7XG4gICAgICAgIHZhciByZXN1bHQgPSAwO1xuICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgdGhpcy5maWVsZFNpemU7IGkgKyspe1xuICAgICAgICAgICAgaWYodGhpcy5nYW1lQXJyYXlbaV1bY29sXS5pc0VtcHR5KXtcbiAgICAgICAgICAgICAgICByZXN1bHQgKys7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICByYW5kb21Db2xvcigpOnN0cmluZ3tcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2VtQ29sb3JzW1BoYXNlci5NYXRoLkJldHdlZW4oMCwgdGhpcy5nZW1Db2xvcnMubGVuZ3RoIC0gMSldO1xuICAgIH1cbn0iXSwibmFtZXMiOlsiR2VtIiwiTWF0Y2giLCJkcmF3RmllbGQiLCJnYW1lQXJyYXkiLCJwb29sQXJyYXkiLCJnZW1Hcm91cCIsInNjZW5lIiwiYWRkIiwiZ3JvdXAiLCJpIiwiZmllbGRTaXplIiwiaiIsImNvbG9yIiwicmFuZG9tQ29sb3IiLCJnZW0iLCJzcHJpdGUiLCJnZW1TaXplIiwiZ2VtQ29sb3IiLCJnZW1TcHJpdGUiLCJpc0VtcHR5IiwiaXNNYXRjaCIsInJvdyIsImNvbCIsImlzSG9yaXpvbnRhbE1hdGNoIiwiaXNWZXJ0aWNhbE1hdGNoIiwiZ2VtQXQiLCJnZW1TZWxlY3QiLCJwb2ludGVyIiwiY2FuUGljayIsImRyYWdnaW5nIiwiTWF0aCIsImZsb29yIiwieSIsIngiLCJwaWNrZWRHZW0iLCJzZWxlY3RlZEdlbSIsInNldFNjYWxlIiwic2V0RGVwdGgiLCJhcmVUaGVTYW1lIiwiYXJlTmV4dCIsInN3YXBHZW1zIiwic3RhcnRTd2lwZSIsImRlbHRhWCIsImRvd25YIiwiZGVsdGFZIiwiZG93blkiLCJkZWx0YVJvdyIsImRlbHRhQ29sIiwiYWJzIiwiZ2V0R2VtUm93IiwiZ2V0R2VtQ29sIiwic3RvcFN3aXBlIiwiZ2VtMSIsImdlbTIiLCJzd2FwQmFjayIsInN3YXBwaW5nR2VtcyIsImZyb21Db2xvciIsImZyb21TcHJpdGUiLCJ0b0NvbG9yIiwidG9TcHJpdGUiLCJnZW0xUm93IiwiZ2VtMUNvbCIsImdlbTJSb3ciLCJnZW0yQ29sIiwidHdlZW5HZW0iLCJ0d2VlbnMiLCJ0YXJnZXRzIiwiZHVyYXRpb24iLCJzd2FwU3BlZWQiLCJjYWxsYmFja1Njb3BlIiwib25Db21wbGV0ZSIsIm1hdGNoSW5Cb2FyZCIsImhhbmRsZU1hdGNoZXMiLCJyZW1vdmVNYXAiLCJwdXNoIiwibWFya01hdGNoZXMiLCJkZXN0cm95R2VtcyIsImRpcmVjdGlvbiIsImNvbG9yU3RyZWFrIiwiY3VycmVudENvbG9yIiwic3RhcnRTdHJlYWsiLCJjb2xvclRvV2F0Y2giLCJjb25zb2xlIiwibG9nIiwiayIsImRlc3Ryb3llZCIsImFscGhhIiwiZGVzdHJveVNwZWVkIiwidmlzaWJsZSIsIm1ha2VHZW1zRmFsbCIsInJlcGxlbmlzaEZpZWxkIiwiZmFsbFRpbGVzIiwiaG9sZXNCZWxvdyIsImZhbGxTcGVlZCIsInJlc3VsdCIsInJlcGxlbmlzaGVkIiwiZW1wdHlTcG90cyIsImhvbGVzSW5Db2wiLCJwb3AiLCJzZXRUZXh0dXJlIiwidGltZSIsImFkZEV2ZW50IiwiZGVsYXkiLCJjYWxsYmFjayIsImdlbUNvbG9ycyIsIlBoYXNlciIsIkJldHdlZW4iLCJsZW5ndGgiLCJjb25zdHJ1Y3RvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/game/components/Match.ts\n"));

/***/ }),

/***/ "./src/game/scenes/Battle.ts":
/*!***********************************!*\
  !*** ./src/game/scenes/Battle.ts ***!
  \***********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Battle: function() { return /* binding */ Battle; }\n/* harmony export */ });\n/* harmony import */ var _lib_GameLib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/GameLib */ \"./src/lib/GameLib.ts\");\n/* harmony import */ var _EventBus__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../EventBus */ \"./src/game/EventBus.ts\");\n/* harmony import */ var phaser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! phaser */ \"./node_modules/phaser/dist/phaser.js\");\n/* harmony import */ var phaser__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(phaser__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _components_GameManager__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../components/GameManager */ \"./src/game/components/GameManager.ts\");\n/* harmony import */ var _lib_components_DebugButton__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/lib/components/DebugButton */ \"./src/lib/components/DebugButton.ts\");\n/* harmony import */ var _components_CardRepo__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../components/CardRepo */ \"./src/game/components/CardRepo.ts\");\n/* harmony import */ var _components_Opponent__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../components/Opponent */ \"./src/game/components/Opponent.ts\");\n/* harmony import */ var _components_HealthBar__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../components/HealthBar */ \"./src/game/components/HealthBar.ts\");\n/* harmony import */ var _modals_ModalSimpleMessage__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../modals/ModalSimpleMessage */ \"./src/game/modals/ModalSimpleMessage.ts\");\n/* harmony import */ var _components_Match__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../components/Match */ \"./src/game/components/Match.ts\");\n\n\n\n\n\n\n\n\n\n\nclass Battle extends phaser__WEBPACK_IMPORTED_MODULE_2__.Scene {\n    create(data) {\n        this.camera = this.cameras.main;\n        this.camera.setBackgroundColor(0xe6e6e6);\n        this.gameManager = new _components_GameManager__WEBPACK_IMPORTED_MODULE_3__[\"default\"](this);\n        this.gameManager.loadData();\n        // Get Opponent Data\n        let cardKey = this.gameManager.getCardKey(this.gameManager.battleSlotNumber);\n        let card = _components_CardRepo__WEBPACK_IMPORTED_MODULE_5__.CardRepo.findCard(cardKey);\n        if (card == undefined) {\n            console.log(\"Unable to find Card Data\");\n            this.simulateWin();\n            return;\n        }\n        // Render Opponent Sprite\n        this.opponent = new _components_Opponent__WEBPACK_IMPORTED_MODULE_6__[\"default\"](this, card);\n        // Render Player\n        this.player = this.add.sprite(_lib_GameLib__WEBPACK_IMPORTED_MODULE_0__[\"default\"].screenWidth / 2, _lib_GameLib__WEBPACK_IMPORTED_MODULE_0__[\"default\"].screenHeight - 200, \"player\");\n        this.playerHealthBar = new _components_HealthBar__WEBPACK_IMPORTED_MODULE_7__[\"default\"](this, _lib_GameLib__WEBPACK_IMPORTED_MODULE_0__[\"default\"].screenWidth / 2, _lib_GameLib__WEBPACK_IMPORTED_MODULE_0__[\"default\"].screenHeight - 400);\n        this.renderHealth();\n        // Render Match Game\n        this.tiles = this.add.group();\n        let debugWin = new _lib_components_DebugButton__WEBPACK_IMPORTED_MODULE_4__[\"default\"](this, 150, _lib_GameLib__WEBPACK_IMPORTED_MODULE_0__[\"default\"].screenHeight - 100, \"Set Win\");\n        debugWin.scale = 0.5;\n        this.add.existing(debugWin);\n        debugWin.onPressed(()=>{\n            this.simulateWin();\n        });\n        let debugLose = new _lib_components_DebugButton__WEBPACK_IMPORTED_MODULE_4__[\"default\"](this, 150, _lib_GameLib__WEBPACK_IMPORTED_MODULE_0__[\"default\"].screenHeight - 200, \"Set Lose\");\n        debugLose.scale = 0.5;\n        this.add.existing(debugLose);\n        debugLose.onPressed(()=>{\n            this.simulateLose();\n        });\n        let debugAttack = new _lib_components_DebugButton__WEBPACK_IMPORTED_MODULE_4__[\"default\"](this, _lib_GameLib__WEBPACK_IMPORTED_MODULE_0__[\"default\"].screenWidth - 150, _lib_GameLib__WEBPACK_IMPORTED_MODULE_0__[\"default\"].screenHeight - 200, \"Attack\");\n        debugAttack.scale = 0.5;\n        this.add.existing(debugAttack);\n        debugAttack.onPressed(()=>{\n            this.playerAttack();\n        });\n        this.events.addListener(\"player-update\", ()=>{\n            this.renderHealth();\n            this.checkWinLoseCondition();\n        });\n        this.events.addListener(\"opponent-update\", ()=>{\n            this.checkWinLoseCondition();\n        });\n        new _components_Match__WEBPACK_IMPORTED_MODULE_9__[\"default\"](this);\n        _EventBus__WEBPACK_IMPORTED_MODULE_1__.EventBus.emit(\"current-scene-ready\", this);\n    }\n    renderHealth() {\n        this.playerHealthBar.renderHealth(this.gameManager.currentHp, this.gameManager.maxHp);\n    }\n    playerAttack() {\n        this.opponent.damage(1);\n    }\n    simulateWin() {\n        this.processWin();\n    }\n    simulateLose() {\n        this.gameManager.damage();\n        this.gameManager.damage();\n        this.gameManager.damage();\n    }\n    checkWinLoseCondition() {\n        if (this.gameManager.currentHp <= 0) {\n            this.processLose();\n        }\n        if (this.opponent.currentHp <= 0) {\n            this.processWin();\n        }\n    }\n    processWin() {\n        new _modals_ModalSimpleMessage__WEBPACK_IMPORTED_MODULE_8__[\"default\"](this, \"ModalWin\", \"Win\", ()=>{\n            this.clean();\n            this.gameManager.clearCardKey(this.gameManager.battleSlotNumber);\n            this.gameManager.setBattleSlotNumber(0);\n            this.gameManager.saveData();\n            this.scene.start(\"Game\", {\n                isContinue: true\n            });\n        });\n    }\n    processLose() {\n        new _modals_ModalSimpleMessage__WEBPACK_IMPORTED_MODULE_8__[\"default\"](this, \"ModalLose\", \"Lose\", ()=>{\n            this.clean();\n            this.gameManager.clearData();\n            this.scene.start(\"GameOver\", {\n                status: this.gameManager.checkGameStatus()\n            });\n        });\n    }\n    clean() {\n        this.events.removeListener(\"player-update\");\n        this.events.removeListener(\"opponent-update\");\n        this.cameras.resetAll();\n    }\n    constructor(){\n        super(\"Battle\");\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/game/scenes/Battle.ts\n"));

/***/ })

});