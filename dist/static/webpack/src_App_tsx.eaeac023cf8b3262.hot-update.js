"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("src_App_tsx",{

/***/ "./src/game/components/PanelSelectCard/PanelSelectCard.ts":
/*!****************************************************************!*\
  !*** ./src/game/components/PanelSelectCard/PanelSelectCard.ts ***!
  \****************************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ panelSelectedCard; }\n/* harmony export */ });\n/* harmony import */ var _lib_components_CloseButton__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/components/CloseButton */ \"./src/lib/components/CloseButton.ts\");\n/* harmony import */ var _lib_GameLib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/GameLib */ \"./src/lib/GameLib.ts\");\n/* harmony import */ var _lib_repos_DeckRepo__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/repos/DeckRepo */ \"./src/lib/repos/DeckRepo.ts\");\n/* harmony import */ var _TabButtonDeck__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./TabButtonDeck */ \"./src/game/components/PanelSelectCard/TabButtonDeck.ts\");\n/* harmony import */ var _VocabCard__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./VocabCard */ \"./src/game/components/PanelSelectCard/VocabCard.ts\");\n\n\n\n\n\nclass panelSelectedCard {\n    static preload(scene) {}\n    renderDeckTabs(decks) {\n        // Once Only\n        const topLeftPos = this.panel.getTopLeft();\n        //\n        const rowY = topLeftPos.y + this.deckButtonSectionDiffY + this.deckButtonGap / 2;\n        const startX = topLeftPos.x + this.panelPadding + this.deckButtonGap / 2;\n        decks.forEach((deck, index)=>{\n            let row = Phaser.Math.FloorTo(index / this.deckButtonPerRow); // Row 0 , 1\n            let remainder = index % this.deckButtonPerRow;\n            let posX = startX + this.deckButtonGap * remainder;\n            let posY = rowY + this.deckButtonGap * row;\n            let tabButton = new _TabButtonDeck__WEBPACK_IMPORTED_MODULE_3__[\"default\"](this.scene, posX, posY, this.tabButtonSize, deck);\n            tabButton.onPressCallback = ()=>{\n                this.selectDeckTab(deck.key);\n            };\n            this.container.add(tabButton.container);\n            this.tabButtons.push(tabButton);\n        });\n    }\n    updateDeckTabs() {\n        this.tabButtons.forEach((tab)=>{\n            if (tab.deck && tab.deck.key == this.selectedDeckKey) {\n                tab.setStatus(\"selected\");\n            } else {\n                tab.setStatus(\"default\");\n            }\n        });\n    }\n    selectDeckTab(deckKey) {\n        if (this.selectedDeckKey != deckKey) {\n            this.selectedDeckKey = deckKey;\n            this.updateDeckTabs(); // Rerender Deck Tabs State\n            this.renderVocabs(); // Render new deck vocabs\n        }\n    }\n    renderVocabs() {\n        // Clear\n        let children = this.innerContainer.getAll();\n        children.forEach((child)=>{\n            child.destroy();\n        });\n        // Render Deck\n        const deck = _lib_repos_DeckRepo__WEBPACK_IMPORTED_MODULE_2__.DeckRepo.getDeck(this.selectedDeckKey);\n        if (deck != undefined) {\n            // Calculate with consider to add into inner container\n            const startX = -(this.vocabGapX * (this.vocabPerRow - 1) / 2);\n            const startY = -(this.innerPanelHeight / 2 - this.panelPadding - this.vocabSizeHeight / 2);\n            deck.vocabs.forEach((vocab, index)=>{\n                let row = Phaser.Math.FloorTo(index / this.vocabPerRow); // Row 0 , 1\n                let remainder = index % this.vocabPerRow;\n                let posX = startX + this.vocabGapX * remainder;\n                let posY = startY + this.vocabGapY * row;\n                let vocabCard = new _VocabCard__WEBPACK_IMPORTED_MODULE_4__[\"default\"](this.scene, posX, posY, this.vocabSizeWidth, this.vocabSizeHeight, vocab, {\n                    withForgeCondition: true\n                });\n                vocabCard.setInteractive();\n                vocabCard.onPressCallback = ()=>{\n                    if (this.onCardSelected) {\n                        this.onCardSelected(this.selectedDeckKey, vocab.key);\n                    }\n                    this.close();\n                };\n                // Set vocab card status\n                vocabCard.setStatus(this.manager.getVocabStatus(vocab.key));\n                this.vocabCards.push(vocabCard);\n                this.innerContainer.add(vocabCard.container);\n            });\n        // // Set initial selected card\n        // if( !this.selectedVocabKey && !this.selectedVocabIndex){\n        //     if( deck.vocabs[0] != undefined ){\n        //         this.selectVocabCard(deck.vocabs[0].key,0);\n        //     }\n        // }else{\n        //     // Remain same selected position when change tab but update selected card\n        //     if( deck.vocabs[this.selectedVocabIndex] != undefined ){\n        //         this.selectVocabCard(deck.vocabs[this.selectedVocabIndex].key,this.selectedVocabIndex);\n        //     }else{\n        //         this.selectedVocabKey = '';\n        //         this.bottomButtonConfirm.setDisabled( true );\n        //     }\n        // }\n        }\n    }\n    open() {\n        this.container.setVisible(true);\n        if (this.onPanelOpen) this.onPanelOpen();\n    }\n    close() {\n        this.container.setVisible(false);\n        if (this.onPanelClose) this.onPanelClose();\n    }\n    constructor(scene, manager, x, y){\n        // Panel\n        this.panelWidth = _lib_GameLib__WEBPACK_IMPORTED_MODULE_1__[\"default\"].screenWidth - 100;\n        this.panelPadding = 50;\n        // Close Button\n        this.closeButtonSize = 120;\n        this.deckButtonPerRow = 6;\n        this.vocabSizeWidth = 180;\n        this.vocabSizeHeight = _VocabCard__WEBPACK_IMPORTED_MODULE_4__[\"default\"].calculateHeight(180);\n        this.vocabPerRow = 4;\n        this.vocabRow = 3;\n        //\n        this.tabButtonSize = 120;\n        this.tabButtons = [];\n        //\n        this.vocabCards = [];\n        this.scene = scene;\n        this.manager = manager;\n        this.container = scene.add.container(_lib_GameLib__WEBPACK_IMPORTED_MODULE_1__[\"default\"].screenWidth / 2, _lib_GameLib__WEBPACK_IMPORTED_MODULE_1__[\"default\"].screenHeight / 2).setDepth(100);\n        this.backdrop = scene.add.rectangle(0, 0, _lib_GameLib__WEBPACK_IMPORTED_MODULE_1__[\"default\"].screenWidth, _lib_GameLib__WEBPACK_IMPORTED_MODULE_1__[\"default\"].screenHeight, 0x000000, 0.5);\n        this.container.add(this.backdrop);\n        // Initial Selected Deck Key\n        const decks = _lib_repos_DeckRepo__WEBPACK_IMPORTED_MODULE_2__.DeckRepo.getDecks();\n        this.deckButtonGap = (this.panelWidth - this.panelPadding * 2) / this.deckButtonPerRow;\n        this.deckButtonRow = Phaser.Math.FloorTo(decks.length / this.deckButtonPerRow) + 1;\n        // Calculate Total Panel Height Based on Content\n        // Padding Top\n        let totalHeight = 0;\n        totalHeight += this.panelPadding; // Top Padding\n        totalHeight += this.closeButtonSize; // Close Button\n        totalHeight += this.panelPadding / 2; // Padding Sm\n        //\n        this.deckButtonSectionDiffY = totalHeight;\n        //\n        totalHeight += this.deckButtonRow * this.deckButtonGap; // Deck Tab Buttons\n        totalHeight += this.panelPadding / 2; // Padding Sm\n        //\n        this.vocabSectionDiffY = totalHeight;\n        //\n        let innerPanelHeight = 0;\n        innerPanelHeight += this.panelPadding; // Inner Top Padding\n        innerPanelHeight += (this.vocabSizeHeight + this.panelPadding) * this.vocabRow;\n        this.innerPanelHeight = innerPanelHeight;\n        totalHeight += innerPanelHeight;\n        totalHeight += this.panelPadding; // Bottom Padding\n        this.panelHeight = totalHeight;\n        // Render Panel\n        this.panel = scene.add.rectangle(0, 0, this.panelWidth, this.panelHeight, _lib_GameLib__WEBPACK_IMPORTED_MODULE_1__[\"default\"].colorPanelBg);\n        this.container.add(this.panel);\n        const topRightPos = this.panel.getTopRight();\n        // Render Close Button\n        const closeButtonX = topRightPos.x - this.panelPadding - this.closeButtonSize / 2;\n        const closeButtonY = topRightPos.y + this.panelPadding + this.closeButtonSize / 2;\n        this.closeButton = new _lib_components_CloseButton__WEBPACK_IMPORTED_MODULE_0__[\"default\"](scene, closeButtonX, closeButtonY);\n        this.closeButton.buttonSprite.displayHeight = this.closeButtonSize;\n        this.closeButton.buttonSprite.displayWidth = this.closeButtonSize;\n        this.closeButton.onPressed(()=>{\n            this.close();\n        });\n        this.container.add(this.closeButton);\n        // Render Inner Panel\n        const relativeInnerPanelY = topRightPos.y + this.vocabSectionDiffY + this.innerPanelHeight / 2;\n        this.innerPanelWidth = this.panelWidth - this.panelPadding * 2;\n        this.innerPanel = scene.add.rectangle(0, relativeInnerPanelY, this.innerPanelWidth, this.innerPanelHeight, _lib_GameLib__WEBPACK_IMPORTED_MODULE_1__[\"default\"].colorPanelBgDark);\n        this.container.add(this.innerPanel);\n        this.innerContainer = scene.add.container(0, relativeInnerPanelY);\n        this.container.add(this.innerContainer);\n        // Calculate vocab dimension\n        this.vocabGapX = (this.innerPanelWidth - this.panelPadding) / this.vocabPerRow;\n        this.vocabGapY = this.vocabSizeHeight + this.panelPadding;\n        this.renderDeckTabs(decks);\n        this.selectDeckTab(decks[0].key);\n        this.container.setVisible(false);\n    }\n}\n\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/game/components/PanelSelectCard/PanelSelectCard.ts\n"));

/***/ })

});