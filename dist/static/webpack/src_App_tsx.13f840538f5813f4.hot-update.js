"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("src_App_tsx",{

/***/ "./src/game/components/PanelSelectCard/PanelSelectCard.ts":
/*!****************************************************************!*\
  !*** ./src/game/components/PanelSelectCard/PanelSelectCard.ts ***!
  \****************************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ panelSelectedCard; }\n/* harmony export */ });\n/* harmony import */ var _lib_components_CloseButton__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/components/CloseButton */ \"./src/lib/components/CloseButton.ts\");\n/* harmony import */ var _lib_GameLib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/GameLib */ \"./src/lib/GameLib.ts\");\n/* harmony import */ var _lib_repos_DeckRepo__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/repos/DeckRepo */ \"./src/lib/repos/DeckRepo.ts\");\n/* harmony import */ var _TabButtonDeck__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./TabButtonDeck */ \"./src/game/components/PanelSelectCard/TabButtonDeck.ts\");\n/* harmony import */ var _VocabCard__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./VocabCard */ \"./src/game/components/PanelSelectCard/VocabCard.ts\");\n/* harmony import */ var _lib_components_BasicButton__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @/lib/components/BasicButton */ \"./src/lib/components/BasicButton.ts\");\n\n\n\n\n\n\nclass panelSelectedCard {\n    static preload(scene) {}\n    renderDeckTabs(decks) {\n        // Once Only\n        const topLeftPos = this.panel.getTopLeft();\n        //\n        const rowY = topLeftPos.y + this.deckButtonSectionDiffY + this.deckButtonGap / 2;\n        const startX = topLeftPos.x + this.panelPadding + this.deckButtonGap / 2;\n        decks.forEach((deck, index)=>{\n            let row = Phaser.Math.FloorTo(index / this.deckButtonPerRow); // Row 0 , 1\n            let remainder = index % this.deckButtonPerRow;\n            let posX = startX + this.deckButtonGap * remainder;\n            let posY = rowY + this.deckButtonGap * row;\n            let tabButton = new _TabButtonDeck__WEBPACK_IMPORTED_MODULE_3__[\"default\"](this.scene, posX, posY, this.tabButtonSize, deck);\n            tabButton.onPressCallback = ()=>{\n                this.selectDeckTab(deck.key);\n            };\n            this.container.add(tabButton.container);\n            this.tabButtons.push(tabButton);\n        });\n    }\n    updateDeckTabs() {\n        this.tabButtons.forEach((tab)=>{\n            if (tab.deck && tab.deck.key == this.selectedDeckKey) {\n                tab.setStatus(\"selected\");\n            } else {\n                tab.setStatus(\"default\");\n            }\n        });\n    }\n    updateVocabCards() {\n        this.vocabCards.forEach((card)=>{\n            if (card.vocab && card.vocab.key == this.selectedVocabKey) {\n                card.setButtonState(\"selected\");\n            } else {\n                card.setButtonState(\"default\");\n            }\n        });\n    }\n    selectDeckTab(deckKey) {\n        if (this.selectedDeckKey != deckKey) {\n            this.selectedDeckKey = deckKey;\n            this.updateDeckTabs(); // Rerender Deck Tabs State\n            this.renderVocabs(); // Render new deck vocabs\n        }\n    }\n    selectVocabCard(vocabKey, vocabIndex) {\n        this.selectedVocabKey = vocabKey;\n        this.selectedVocabIndex = vocabIndex;\n        if (this.bottomText) {\n            const vocab = _lib_repos_DeckRepo__WEBPACK_IMPORTED_MODULE_2__.DeckRepo.getVocab(this.selectedDeckKey, this.selectedVocabKey);\n            if (vocab != undefined) {\n                this.bottomText.setText(vocab.name);\n            } else {\n                this.bottomText.setText(\"\");\n            }\n        }\n        if (this.selectedDeckKey) {\n            this.bottomButtonConfirm.setDisabled(false);\n        } else {\n            this.bottomButtonConfirm.setDisabled(true);\n        }\n        this.updateVocabCards();\n    }\n    renderVocabs() {\n        // Clear\n        let children = this.innerContainer.getAll();\n        children.forEach((child)=>{\n            child.destroy();\n        });\n        // Render Deck\n        const deck = _lib_repos_DeckRepo__WEBPACK_IMPORTED_MODULE_2__.DeckRepo.getDeck(this.selectedDeckKey);\n        if (deck != undefined) {\n            // Calculate with consider to add into inner container\n            const startX = -(this.vocabGapX * (this.vocabPerRow - 1) / 2);\n            const startY = -(this.innerPanelHeight / 2 - this.panelPadding - this.vocabSizeHeight / 2);\n            deck.vocabs.forEach((vocab, index)=>{\n                let row = Phaser.Math.FloorTo(index / this.vocabPerRow); // Row 0 , 1\n                let remainder = index % this.vocabPerRow;\n                let posX = startX + this.vocabGapX * remainder;\n                let posY = startY + this.vocabGapY * row;\n                // let vocabSprite:GameObjects.Sprite = this.scene.add.sprite(posX,posY,'vocabCardBase');\n                // vocabSprite.setDisplaySize(this.vocabSizeWidth,this.vocabSizeHeight);\n                let vocabCard = new _VocabCard__WEBPACK_IMPORTED_MODULE_4__[\"default\"](this.scene, posX, posY, this.vocabSizeWidth, this.vocabSizeHeight, vocab);\n                vocabCard.onPressCallback = ()=>{\n                    this.selectVocabCard(vocab.key, index);\n                };\n                this.vocabCards.push(vocabCard);\n                this.innerContainer.add(vocabCard.container);\n            });\n            if (!this.selectedVocabKey && !this.selectedVocabIndex) {\n                if (deck.vocabs[0] != undefined) {\n                    this.selectVocabCard(deck.vocabs[0].key, 0);\n                }\n            } else {\n                if (deck.vocabs[this.selectedVocabIndex] != undefined) {\n                    this.selectVocabCard(deck.vocabs[this.selectedVocabIndex].key, this.selectedVocabIndex);\n                } else {\n                    this.selectedVocabKey = \"\";\n                    this.bottomButtonConfirm.setDisabled(true);\n                }\n            }\n        }\n    }\n    open() {\n        this.container.setVisible(true);\n        if (this.onPanelOpen) this.onPanelOpen();\n    }\n    close() {\n        this.container.setVisible(false);\n        if (this.onPanelClose) this.onPanelClose();\n    }\n    constructor(scene, x, y){\n        // Panel\n        this.panelWidth = _lib_GameLib__WEBPACK_IMPORTED_MODULE_1__[\"default\"].screenWidth - 100;\n        this.panelPadding = 50;\n        // Close Button\n        this.closeButtonSize = 120;\n        this.deckButtonPerRow = 6;\n        this.vocabSizeWidth = 180;\n        this.vocabSizeHeight = 1360 / 980 * 180;\n        this.vocabPerRow = 4;\n        this.vocabRow = 3;\n        this.bottomTextHeight = 120;\n        //\n        this.tabButtonSize = 120;\n        this.tabButtons = [];\n        //\n        this.vocabCards = [];\n        this.scene = scene;\n        this.container = scene.add.container(_lib_GameLib__WEBPACK_IMPORTED_MODULE_1__[\"default\"].screenWidth / 2, _lib_GameLib__WEBPACK_IMPORTED_MODULE_1__[\"default\"].screenHeight / 2).setDepth(100);\n        this.backdrop = scene.add.rectangle(0, 0, _lib_GameLib__WEBPACK_IMPORTED_MODULE_1__[\"default\"].screenWidth, _lib_GameLib__WEBPACK_IMPORTED_MODULE_1__[\"default\"].screenHeight, 0x000000, 0.5);\n        this.container.add(this.backdrop);\n        // Initial Selected Deck Key\n        const decks = _lib_repos_DeckRepo__WEBPACK_IMPORTED_MODULE_2__.DeckRepo.getDecks();\n        this.deckButtonGap = (this.panelWidth - this.panelPadding * 2) / this.deckButtonPerRow;\n        this.deckButtonRow = Phaser.Math.FloorTo(decks.length / this.deckButtonPerRow) + 1;\n        // Calculate Total Panel Height Based on Content\n        // Padding Top\n        let totalHeight = 0;\n        totalHeight += this.panelPadding; // Top Padding\n        totalHeight += this.closeButtonSize; // Close Button\n        totalHeight += this.panelPadding / 2; // Padding Sm\n        //\n        this.deckButtonSectionDiffY = totalHeight;\n        //\n        totalHeight += this.deckButtonRow * this.deckButtonGap; // Deck Tab Buttons\n        totalHeight += this.panelPadding / 2; // Padding Sm\n        //\n        this.vocabSectionDiffY = totalHeight;\n        //\n        let innerPanelHeight = 0;\n        innerPanelHeight += this.panelPadding; // Inner Top Padding\n        innerPanelHeight += (this.vocabSizeHeight + this.panelPadding) * this.vocabRow;\n        this.innerPanelHeight = innerPanelHeight;\n        totalHeight += innerPanelHeight;\n        totalHeight += this.bottomTextHeight;\n        totalHeight += this.panelPadding; // Bottom Padding\n        this.panelHeight = totalHeight;\n        // Render Panel\n        this.panel = scene.add.rectangle(0, 0, this.panelWidth, this.panelHeight, _lib_GameLib__WEBPACK_IMPORTED_MODULE_1__[\"default\"].colorPanelBg);\n        this.container.add(this.panel);\n        const topRightPos = this.panel.getTopRight();\n        // Render Close Button\n        const closeButtonX = topRightPos.x - this.panelPadding - this.closeButtonSize / 2;\n        const closeButtonY = topRightPos.y + this.panelPadding + this.closeButtonSize / 2;\n        this.closeButton = new _lib_components_CloseButton__WEBPACK_IMPORTED_MODULE_0__[\"default\"](scene, closeButtonX, closeButtonY);\n        this.closeButton.buttonSprite.displayHeight = this.closeButtonSize;\n        this.closeButton.buttonSprite.displayWidth = this.closeButtonSize;\n        this.closeButton.onPressed(()=>{\n            this.close();\n        });\n        this.container.add(this.closeButton);\n        // Render Inner Panel\n        const relativeInnerPanelY = topRightPos.y + this.vocabSectionDiffY + this.innerPanelHeight / 2;\n        this.innerPanelWidth = this.panelWidth - this.panelPadding * 2;\n        this.innerPanel = scene.add.rectangle(0, relativeInnerPanelY, this.innerPanelWidth, this.innerPanelHeight, _lib_GameLib__WEBPACK_IMPORTED_MODULE_1__[\"default\"].colorPanelBgDark);\n        this.container.add(this.innerPanel);\n        this.innerContainer = scene.add.container(0, relativeInnerPanelY);\n        this.container.add(this.innerContainer);\n        // Render Bottom Text\n        const bottomLeft = this.panel.getBottomLeft();\n        this.bottomText = scene.add.text(bottomLeft.x + this.panelPadding, bottomLeft.y - this.panelPadding - this.bottomTextHeight / 2, \"\", {\n            fontSize: \"32px\",\n            fontFamily: \"Arial\",\n            color: \"#000000\"\n        }).setOrigin(0, 0.5);\n        this.container.add(this.bottomText);\n        const bottomRight = this.panel.getBottomRight();\n        this.bottomButtonConfirm = new _lib_components_BasicButton__WEBPACK_IMPORTED_MODULE_5__[\"default\"](scene, bottomRight.x - this.panelPadding - _lib_components_BasicButton__WEBPACK_IMPORTED_MODULE_5__[\"default\"].getWidth(\"sm\") / 2, bottomLeft.y - this.panelPadding - this.bottomTextHeight / 2, \"Select\", \"sm\");\n        this.bottomButtonConfirm.onPressedCallback = ()=>{\n            if (this.onCardSelected) {\n                this.onCardSelected();\n            }\n            this.close();\n        };\n        this.container.add(this.bottomButtonConfirm);\n        // Calculate vocab dimension\n        this.vocabGapX = (this.innerPanelWidth - this.panelPadding) / this.vocabPerRow;\n        this.vocabGapY = this.vocabSizeHeight + this.panelPadding;\n        this.renderDeckTabs(decks);\n        this.selectDeckTab(decks[0].key);\n        this.container.setVisible(false);\n    }\n}\n\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvZ2FtZS9jb21wb25lbnRzL1BhbmVsU2VsZWN0Q2FyZC9QYW5lbFNlbGVjdENhcmQudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFzRDtBQUNuQjtBQUN5QjtBQUVqQjtBQUNSO0FBQ21CO0FBR3ZDLE1BQU1NO0lBRWpCLE9BQU9DLFFBQVNDLEtBQW1CLEVBQUUsQ0FFckM7SUEySkFDLGVBQWdCQyxLQUFZLEVBQUU7UUFDMUIsWUFBWTtRQUNaLE1BQU1DLGFBQTJDLElBQUksQ0FBQ0MsS0FBSyxDQUFDQyxVQUFVO1FBQ3RFLEVBQUU7UUFDRixNQUFNQyxPQUFlSCxXQUFXSSxDQUFDLEdBQUcsSUFBSSxDQUFDQyxzQkFBc0IsR0FBSSxJQUFJLENBQUNDLGFBQWEsR0FBQztRQUN0RixNQUFNQyxTQUFpQlAsV0FBV1EsQ0FBQyxHQUFHLElBQUksQ0FBQ0MsWUFBWSxHQUFJLElBQUksQ0FBQ0gsYUFBYSxHQUFDO1FBRTlFUCxNQUFNVyxPQUFPLENBQUMsQ0FBRUMsTUFBTUM7WUFDbEIsSUFBSUMsTUFBTUMsT0FBT0MsSUFBSSxDQUFDQyxPQUFPLENBQUNKLFFBQU0sSUFBSSxDQUFDSyxnQkFBZ0IsR0FBRyxZQUFZO1lBQ3hFLElBQUlDLFlBQVlOLFFBQU0sSUFBSSxDQUFDSyxnQkFBZ0I7WUFFM0MsSUFBSUUsT0FBZVosU0FBUSxJQUFJLENBQUNELGFBQWEsR0FBQ1k7WUFDOUMsSUFBSUUsT0FBZWpCLE9BQVEsSUFBSSxDQUFDRyxhQUFhLEdBQUNPO1lBRTlDLElBQUlRLFlBQTBCLElBQUk3QixzREFBYUEsQ0FBQyxJQUFJLENBQUNLLEtBQUssRUFBQ3NCLE1BQUtDLE1BQUssSUFBSSxDQUFDRSxhQUFhLEVBQUNYO1lBQ3hGVSxVQUFVRSxlQUFlLEdBQUc7Z0JBQ3hCLElBQUksQ0FBQ0MsYUFBYSxDQUFDYixLQUFLYyxHQUFHO1lBQy9CO1lBRUEsSUFBSSxDQUFDQyxTQUFTLENBQUNDLEdBQUcsQ0FBQ04sVUFBVUssU0FBUztZQUN0QyxJQUFJLENBQUNF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QUFJLENBQUNRLFNBQVMsR0FBRyxDQUFDLElBQUksQ0FBQ3lDLGVBQWUsR0FBSSxJQUFJLENBQUMzRixZQUFZLElBQU0sSUFBSSxDQUFDbUQsV0FBVztRQUNqRixJQUFJLENBQUNLLFNBQVMsR0FBRyxJQUFJLENBQUNGLGVBQWUsR0FBQyxJQUFJLENBQUN0RCxZQUFZO1FBRXZELElBQUksQ0FBQ1gsY0FBYyxDQUFDQztRQUNwQixJQUFJLENBQUN5QixhQUFhLENBQUV6QixLQUFLLENBQUMsRUFBRSxDQUFDMEIsR0FBRztRQUVoQyxJQUFJLENBQUNDLFNBQVMsQ0FBQzJDLFVBQVUsQ0FBQztJQUM5QjtBQTJJSjtBQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL3NyYy9nYW1lL2NvbXBvbmVudHMvUGFuZWxTZWxlY3RDYXJkL1BhbmVsU2VsZWN0Q2FyZC50cz8wYjVjIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBDbG9zZUJ1dHRvbiBmcm9tIFwiQC9saWIvY29tcG9uZW50cy9DbG9zZUJ1dHRvblwiXG5pbXBvcnQgR2FtZUxpYiBmcm9tIFwiQC9saWIvR2FtZUxpYlwiXG5pbXBvcnQgeyBEZWNrLCBEZWNrUmVwbywgVm9jYWIgfSBmcm9tIFwiQC9saWIvcmVwb3MvRGVja1JlcG9cIlxuaW1wb3J0IHsgR2FtZU9iamVjdHMsIFNjZW5lLCBUeXBlcyB9IGZyb20gXCJwaGFzZXJcIlxuaW1wb3J0IFRhYkJ1dHRvbkRlY2sgZnJvbSBcIi4vVGFiQnV0dG9uRGVja1wiXG5pbXBvcnQgVm9jYWJDYXJkIGZyb20gXCIuL1ZvY2FiQ2FyZFwiXG5pbXBvcnQgQmFzaWNCdXR0b24gZnJvbSBcIkAvbGliL2NvbXBvbmVudHMvQmFzaWNCdXR0b25cIlxuaW1wb3J0IENhcmRNYWtlck1hbmFnZXIgZnJvbSBcIi4uL0NhcmRNYWtlck1hbmFnZXJcIlxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBwYW5lbFNlbGVjdGVkQ2FyZHtcblxuICAgIHN0YXRpYyBwcmVsb2FkKCBzY2VuZTogUGhhc2VyLlNjZW5lICl7XG4gICAgICAgIFxuICAgIH1cblxuICAgIHNjZW5lOiBTY2VuZVxuICAgIG1hbmFnZXI6IENhcmRNYWtlck1hbmFnZXJcbiAgICBiYWNrZHJvcDogR2FtZU9iamVjdHMuUmVjdGFuZ2xlXG4gICAgY29udGFpbmVyOiBHYW1lT2JqZWN0cy5Db250YWluZXJcbiAgICBwYW5lbDogR2FtZU9iamVjdHMuUmVjdGFuZ2xlXG4gICAgaW5uZXJQYW5lbDogR2FtZU9iamVjdHMuUmVjdGFuZ2xlXG4gICAgaW5uZXJDb250YWluZXI6IEdhbWVPYmplY3RzLkNvbnRhaW5lclxuICAgIGNsb3NlQnV0dG9uOiBDbG9zZUJ1dHRvblxuICAgIC8vXG4gICAgc2VsZWN0ZWREZWNrS2V5OiBzdHJpbmdcbiAgICBzZWxlY3RlZFZvY2FiS2V5OiBzdHJpbmdcbiAgICBzZWxlY3RlZFZvY2FiSW5kZXg6IG51bWJlclxuICAgIC8vIFBhbmVsXG4gICAgcGFuZWxXaWR0aDogbnVtYmVyID0gR2FtZUxpYi5zY3JlZW5XaWR0aC0xMDBcbiAgICBwYW5lbEhlaWdodDogbnVtYmVyXG4gICAgcGFuZWxQYWRkaW5nOiBudW1iZXIgPSA1MFxuICAgIC8vIENsb3NlIEJ1dHRvblxuICAgIGNsb3NlQnV0dG9uU2l6ZTogbnVtYmVyID0gMTIwIFxuICAgIC8vIFRhYiBEZWNrc1xuICAgIGRlY2tCdXR0b25TZWN0aW9uRGlmZlk6IG51bWJlclxuICAgIGRlY2tCdXR0b25QZXJSb3c6IG51bWJlciA9IDZcbiAgICBkZWNrQnV0dG9uR2FwOiBudW1iZXJcbiAgICBkZWNrQnV0dG9uUm93OiBudW1iZXJcbiAgICAvL1xuICAgIGlubmVyUGFuZWxIZWlnaHQ6IG51bWJlclxuICAgIGlubmVyUGFuZWxXaWR0aDogbnVtYmVyXG4gICAgdm9jYWJTZWN0aW9uRGlmZlk6IG51bWJlclxuICAgIHZvY2FiU2l6ZVdpZHRoOiBudW1iZXIgPSAxODBcbiAgICB2b2NhYlNpemVIZWlnaHQ6IG51bWJlciA9IDEzNjAvOTgwKjE4MFxuICAgIHZvY2FiUGVyUm93OiBudW1iZXIgPSA0XG4gICAgdm9jYWJSb3c6IG51bWJlciA9IDNcbiAgICB2b2NhYkdhcFg6IG51bWJlclxuICAgIHZvY2FiR2FwWTogbnVtYmVyXG4gICAgLy9cbiAgICBib3R0b21UZXh0OiBHYW1lT2JqZWN0cy5UZXh0XG4gICAgYm90dG9tVGV4dEhlaWdodDogbnVtYmVyID0gMTIwXG4gICAgYm90dG9tQnV0dG9uQ29uZmlybTogQmFzaWNCdXR0b25cbiAgICAvL1xuICAgIHRhYkJ1dHRvblNpemU6IG51bWJlciA9IDEyMFxuICAgIHRhYkJ1dHRvbnM6IFRhYkJ1dHRvbkRlY2tbXSA9IFtdXG4gICAgLy9cbiAgICB2b2NhYkNhcmRzOiBWb2NhYkNhcmRbXSA9IFtdXG4gICAgLy9cbiAgICBvbkNhcmRTZWxlY3RlZDogRnVuY3Rpb24gfCBudWxsXG4gICAgb25QYW5lbE9wZW46IEZ1bmN0aW9uIHwgbnVsbFxuICAgIG9uUGFuZWxDbG9zZTogRnVuY3Rpb24gfCBudWxsXG5cbiAgICBjb25zdHJ1Y3Rvciggc2NlbmU6U2NlbmUsIHg6bnVtYmVyLCB5Om51bWJlciApe1xuICAgICAgICB0aGlzLnNjZW5lID0gc2NlbmVcblxuICAgICAgICB0aGlzLmNvbnRhaW5lciA9IHNjZW5lLmFkZC5jb250YWluZXIoR2FtZUxpYi5zY3JlZW5XaWR0aC8yLEdhbWVMaWIuc2NyZWVuSGVpZ2h0LzIpLnNldERlcHRoKDEwMCk7XG5cbiAgICAgICAgdGhpcy5iYWNrZHJvcCA9IHNjZW5lLmFkZC5yZWN0YW5nbGUoMCwwLEdhbWVMaWIuc2NyZWVuV2lkdGgsR2FtZUxpYi5zY3JlZW5IZWlnaHQsMHgwMDAwMDAsMC41KTtcbiAgICAgICAgdGhpcy5jb250YWluZXIuYWRkKHRoaXMuYmFja2Ryb3ApO1xuXG4gICAgICAgIC8vIEluaXRpYWwgU2VsZWN0ZWQgRGVjayBLZXlcbiAgICAgICAgY29uc3QgZGVja3M6RGVja1tdID0gRGVja1JlcG8uZ2V0RGVja3MoKTtcblxuICAgICAgICB0aGlzLmRlY2tCdXR0b25HYXAgPSAodGhpcy5wYW5lbFdpZHRoLSB0aGlzLnBhbmVsUGFkZGluZyoyKSAvIHRoaXMuZGVja0J1dHRvblBlclJvdztcbiAgICAgICAgdGhpcy5kZWNrQnV0dG9uUm93ID0gUGhhc2VyLk1hdGguRmxvb3JUbyhkZWNrcy5sZW5ndGgvdGhpcy5kZWNrQnV0dG9uUGVyUm93KSArIDE7XG4gICAgICAgIC8vIENhbGN1bGF0ZSBUb3RhbCBQYW5lbCBIZWlnaHQgQmFzZWQgb24gQ29udGVudFxuICAgICAgICAvLyBQYWRkaW5nIFRvcFxuICAgICAgICBsZXQgdG90YWxIZWlnaHQ6bnVtYmVyID0gMDtcbiAgICAgICAgdG90YWxIZWlnaHQgKz0gdGhpcy5wYW5lbFBhZGRpbmc7IC8vIFRvcCBQYWRkaW5nXG4gICAgICAgIHRvdGFsSGVpZ2h0ICs9IHRoaXMuY2xvc2VCdXR0b25TaXplOyAvLyBDbG9zZSBCdXR0b25cbiAgICAgICAgdG90YWxIZWlnaHQgKz0gdGhpcy5wYW5lbFBhZGRpbmcvMjsgLy8gUGFkZGluZyBTbVxuICAgICAgICAvL1xuICAgICAgICB0aGlzLmRlY2tCdXR0b25TZWN0aW9uRGlmZlkgPSB0b3RhbEhlaWdodDtcbiAgICAgICAgLy9cbiAgICAgICAgdG90YWxIZWlnaHQgKz0gdGhpcy5kZWNrQnV0dG9uUm93KnRoaXMuZGVja0J1dHRvbkdhcDsgLy8gRGVjayBUYWIgQnV0dG9uc1xuICAgICAgICB0b3RhbEhlaWdodCArPSB0aGlzLnBhbmVsUGFkZGluZy8yOyAvLyBQYWRkaW5nIFNtXG4gICAgICAgIC8vXG4gICAgICAgIHRoaXMudm9jYWJTZWN0aW9uRGlmZlkgPSB0b3RhbEhlaWdodDtcbiAgICAgICAgLy9cbiAgICAgICAgbGV0IGlubmVyUGFuZWxIZWlnaHQ6IG51bWJlciA9IDA7XG4gICAgICAgIGlubmVyUGFuZWxIZWlnaHQgKz0gdGhpcy5wYW5lbFBhZGRpbmc7IC8vIElubmVyIFRvcCBQYWRkaW5nXG4gICAgICAgIGlubmVyUGFuZWxIZWlnaHQgKz0gKHRoaXMudm9jYWJTaXplSGVpZ2h0K3RoaXMucGFuZWxQYWRkaW5nKSp0aGlzLnZvY2FiUm93O1xuICAgICAgICB0aGlzLmlubmVyUGFuZWxIZWlnaHQgPSBpbm5lclBhbmVsSGVpZ2h0O1xuXG4gICAgICAgIHRvdGFsSGVpZ2h0ICs9IGlubmVyUGFuZWxIZWlnaHQ7XG4gICAgICAgIHRvdGFsSGVpZ2h0ICs9IHRoaXMuYm90dG9tVGV4dEhlaWdodFxuICAgICAgICB0b3RhbEhlaWdodCArPSB0aGlzLnBhbmVsUGFkZGluZzsgLy8gQm90dG9tIFBhZGRpbmdcbiAgICAgICAgXG4gICAgICAgIHRoaXMucGFuZWxIZWlnaHQgPSB0b3RhbEhlaWdodDtcbiAgICAgICAgXG4gICAgICAgIC8vIFJlbmRlciBQYW5lbFxuICAgICAgICB0aGlzLnBhbmVsID0gc2NlbmUuYWRkLnJlY3RhbmdsZSgwLDAsdGhpcy5wYW5lbFdpZHRoLHRoaXMucGFuZWxIZWlnaHQsR2FtZUxpYi5jb2xvclBhbmVsQmcpO1xuICAgICAgICB0aGlzLmNvbnRhaW5lci5hZGQodGhpcy5wYW5lbCk7XG5cbiAgICAgICAgY29uc3QgdG9wUmlnaHRQb3M6UGhhc2VyLlR5cGVzLk1hdGguVmVjdG9yMkxpa2UgPSB0aGlzLnBhbmVsLmdldFRvcFJpZ2h0KCk7XG4gICAgICAgIFxuICAgICAgICAvLyBSZW5kZXIgQ2xvc2UgQnV0dG9uXG4gICAgICAgIGNvbnN0IGNsb3NlQnV0dG9uWDogbnVtYmVyID0gdG9wUmlnaHRQb3MueCAtIHRoaXMucGFuZWxQYWRkaW5nIC0gKHRoaXMuY2xvc2VCdXR0b25TaXplLzIpO1xuICAgICAgICBjb25zdCBjbG9zZUJ1dHRvblk6IG51bWJlciA9IHRvcFJpZ2h0UG9zLnkgKyB0aGlzLnBhbmVsUGFkZGluZyArICh0aGlzLmNsb3NlQnV0dG9uU2l6ZS8yKTtcbiAgICAgICAgdGhpcy5jbG9zZUJ1dHRvbiA9IG5ldyBDbG9zZUJ1dHRvbihzY2VuZSxjbG9zZUJ1dHRvblgsY2xvc2VCdXR0b25ZKTtcbiAgICAgICAgdGhpcy5jbG9zZUJ1dHRvbi5idXR0b25TcHJpdGUuZGlzcGxheUhlaWdodCA9IHRoaXMuY2xvc2VCdXR0b25TaXplO1xuICAgICAgICB0aGlzLmNsb3NlQnV0dG9uLmJ1dHRvblNwcml0ZS5kaXNwbGF5V2lkdGggPSB0aGlzLmNsb3NlQnV0dG9uU2l6ZTtcbiAgICAgICAgdGhpcy5jbG9zZUJ1dHRvbi5vblByZXNzZWQoKCk9PntcbiAgICAgICAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuY29udGFpbmVyLmFkZCh0aGlzLmNsb3NlQnV0dG9uKTtcbiAgICAgICAgXG4gICAgICAgIC8vIFJlbmRlciBJbm5lciBQYW5lbFxuICAgICAgICBjb25zdCByZWxhdGl2ZUlubmVyUGFuZWxZOiBudW1iZXIgPSB0b3BSaWdodFBvcy55ICsgdGhpcy52b2NhYlNlY3Rpb25EaWZmWSArICh0aGlzLmlubmVyUGFuZWxIZWlnaHQvMik7XG4gICAgICAgIHRoaXMuaW5uZXJQYW5lbFdpZHRoID0gdGhpcy5wYW5lbFdpZHRoIC0gKHRoaXMucGFuZWxQYWRkaW5nKjIpO1xuXG4gICAgICAgIHRoaXMuaW5uZXJQYW5lbCA9IHNjZW5lLmFkZC5yZWN0YW5nbGUoMCxyZWxhdGl2ZUlubmVyUGFuZWxZLHRoaXMuaW5uZXJQYW5lbFdpZHRoLHRoaXMuaW5uZXJQYW5lbEhlaWdodCxHYW1lTGliLmNvbG9yUGFuZWxCZ0RhcmspO1xuICAgICAgICB0aGlzLmNvbnRhaW5lci5hZGQodGhpcy5pbm5lclBhbmVsKTtcblxuICAgICAgICB0aGlzLmlubmVyQ29udGFpbmVyID0gc2NlbmUuYWRkLmNvbnRhaW5lcigwLHJlbGF0aXZlSW5uZXJQYW5lbFkpO1xuICAgICAgICB0aGlzLmNvbnRhaW5lci5hZGQodGhpcy5pbm5lckNvbnRhaW5lcik7XG5cbiAgICAgICAgLy8gUmVuZGVyIEJvdHRvbSBUZXh0XG4gICAgICAgIGNvbnN0IGJvdHRvbUxlZnQ6UGhhc2VyLlR5cGVzLk1hdGguVmVjdG9yMkxpa2UgPSB0aGlzLnBhbmVsLmdldEJvdHRvbUxlZnQoKTtcbiAgICAgICAgdGhpcy5ib3R0b21UZXh0ID0gc2NlbmUuYWRkLnRleHQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvdHRvbUxlZnQueCt0aGlzLnBhbmVsUGFkZGluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYm90dG9tTGVmdC55LXRoaXMucGFuZWxQYWRkaW5nLSh0aGlzLmJvdHRvbVRleHRIZWlnaHQvMiksIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6ICczMnB4JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRGYW1pbHk6ICdBcmlhbCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogJyMwMDAwMDAnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKS5zZXRPcmlnaW4oMCwwLjUpO1xuICAgICAgICB0aGlzLmNvbnRhaW5lci5hZGQodGhpcy5ib3R0b21UZXh0KTtcblxuICAgICAgICBjb25zdCBib3R0b21SaWdodDpQaGFzZXIuVHlwZXMuTWF0aC5WZWN0b3IyTGlrZSA9IHRoaXMucGFuZWwuZ2V0Qm90dG9tUmlnaHQoKTtcbiAgICAgICAgdGhpcy5ib3R0b21CdXR0b25Db25maXJtID0gbmV3IEJhc2ljQnV0dG9uKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjZW5lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvdHRvbVJpZ2h0LngtdGhpcy5wYW5lbFBhZGRpbmctKEJhc2ljQnV0dG9uLmdldFdpZHRoKCdzbScpLzIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvdHRvbUxlZnQueS10aGlzLnBhbmVsUGFkZGluZy0odGhpcy5ib3R0b21UZXh0SGVpZ2h0LzIpLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnU2VsZWN0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnc20nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICB0aGlzLmJvdHRvbUJ1dHRvbkNvbmZpcm0ub25QcmVzc2VkQ2FsbGJhY2sgPSAoKT0+e1xuICAgICAgICAgICAgaWYoIHRoaXMub25DYXJkU2VsZWN0ZWQgKXtcbiAgICAgICAgICAgICAgICB0aGlzLm9uQ2FyZFNlbGVjdGVkKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNvbnRhaW5lci5hZGQodGhpcy5ib3R0b21CdXR0b25Db25maXJtKTtcblxuICAgICAgICAvLyBDYWxjdWxhdGUgdm9jYWIgZGltZW5zaW9uXG4gICAgICAgIHRoaXMudm9jYWJHYXBYID0gKHRoaXMuaW5uZXJQYW5lbFdpZHRoIC0gKHRoaXMucGFuZWxQYWRkaW5nKSkgLyAodGhpcy52b2NhYlBlclJvdyk7XG4gICAgICAgIHRoaXMudm9jYWJHYXBZID0gdGhpcy52b2NhYlNpemVIZWlnaHQrdGhpcy5wYW5lbFBhZGRpbmc7XG5cbiAgICAgICAgdGhpcy5yZW5kZXJEZWNrVGFicyhkZWNrcyk7XG4gICAgICAgIHRoaXMuc2VsZWN0RGVja1RhYiggZGVja3NbMF0ua2V5ICk7XG5cbiAgICAgICAgdGhpcy5jb250YWluZXIuc2V0VmlzaWJsZShmYWxzZSk7XG4gICAgfVxuXG4gICAgcmVuZGVyRGVja1RhYnMoIGRlY2tzOkRlY2tbXSApe1xuICAgICAgICAvLyBPbmNlIE9ubHlcbiAgICAgICAgY29uc3QgdG9wTGVmdFBvczpQaGFzZXIuVHlwZXMuTWF0aC5WZWN0b3IyTGlrZSA9IHRoaXMucGFuZWwuZ2V0VG9wTGVmdCgpO1xuICAgICAgICAvL1xuICAgICAgICBjb25zdCByb3dZOiBudW1iZXIgPSB0b3BMZWZ0UG9zLnkgKyB0aGlzLmRlY2tCdXR0b25TZWN0aW9uRGlmZlkgKyAodGhpcy5kZWNrQnV0dG9uR2FwLzIpO1xuICAgICAgICBjb25zdCBzdGFydFg6IG51bWJlciA9IHRvcExlZnRQb3MueCArIHRoaXMucGFuZWxQYWRkaW5nICsgKHRoaXMuZGVja0J1dHRvbkdhcC8yKVxuICAgICAgICBcbiAgICAgICAgZGVja3MuZm9yRWFjaCgoIGRlY2ssIGluZGV4KT0+e1xuICAgICAgICAgICAgbGV0IHJvdyA9IFBoYXNlci5NYXRoLkZsb29yVG8oaW5kZXgvdGhpcy5kZWNrQnV0dG9uUGVyUm93KTsgLy8gUm93IDAgLCAxXG4gICAgICAgICAgICBsZXQgcmVtYWluZGVyID0gaW5kZXgldGhpcy5kZWNrQnV0dG9uUGVyUm93O1xuXG4gICAgICAgICAgICBsZXQgcG9zWDogbnVtYmVyID0gc3RhcnRYKyh0aGlzLmRlY2tCdXR0b25HYXAqcmVtYWluZGVyKTtcbiAgICAgICAgICAgIGxldCBwb3NZOiBudW1iZXIgPSByb3dZICsgKHRoaXMuZGVja0J1dHRvbkdhcCpyb3cpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBsZXQgdGFiQnV0dG9uOlRhYkJ1dHRvbkRlY2sgPSBuZXcgVGFiQnV0dG9uRGVjayh0aGlzLnNjZW5lLHBvc1gscG9zWSx0aGlzLnRhYkJ1dHRvblNpemUsZGVjayk7XG4gICAgICAgICAgICB0YWJCdXR0b24ub25QcmVzc0NhbGxiYWNrID0gKCk9PntcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdERlY2tUYWIoZGVjay5rZXkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLmNvbnRhaW5lci5hZGQodGFiQnV0dG9uLmNvbnRhaW5lcik7XG4gICAgICAgICAgICB0aGlzLnRhYkJ1dHRvbnMucHVzaCh0YWJCdXR0b24pO1xuICAgICAgICB9KVxuICAgIH0gICBcblxuICAgIHVwZGF0ZURlY2tUYWJzKCl7XG4gICAgICAgIHRoaXMudGFiQnV0dG9ucy5mb3JFYWNoKCh0YWIpPT57XG4gICAgICAgICAgICBpZiggdGFiLmRlY2sgJiYgdGFiLmRlY2sua2V5ID09IHRoaXMuc2VsZWN0ZWREZWNrS2V5ICl7XG4gICAgICAgICAgICAgICAgdGFiLnNldFN0YXR1cygnc2VsZWN0ZWQnKTtcbiAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgIHRhYi5zZXRTdGF0dXMoJ2RlZmF1bHQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICB1cGRhdGVWb2NhYkNhcmRzKCl7XG4gICAgICAgIHRoaXMudm9jYWJDYXJkcy5mb3JFYWNoKChjYXJkKT0+e1xuICAgICAgICAgICAgaWYoIGNhcmQudm9jYWIgJiYgY2FyZC52b2NhYi5rZXkgPT0gdGhpcy5zZWxlY3RlZFZvY2FiS2V5ICl7XG4gICAgICAgICAgICAgICAgY2FyZC5zZXRCdXR0b25TdGF0ZSgnc2VsZWN0ZWQnKTtcbiAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgIGNhcmQuc2V0QnV0dG9uU3RhdGUoJ2RlZmF1bHQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICBzZWxlY3REZWNrVGFiKCBkZWNrS2V5OnN0cmluZyApe1xuICAgICAgICBpZiggdGhpcy5zZWxlY3RlZERlY2tLZXkgIT0gZGVja0tleSApe1xuICAgICAgICAgICAgdGhpcy5zZWxlY3RlZERlY2tLZXkgPSBkZWNrS2V5O1xuXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZURlY2tUYWJzKCk7IC8vIFJlcmVuZGVyIERlY2sgVGFicyBTdGF0ZVxuICAgICAgICAgICAgdGhpcy5yZW5kZXJWb2NhYnMoKTsgLy8gUmVuZGVyIG5ldyBkZWNrIHZvY2Fic1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2VsZWN0Vm9jYWJDYXJkKCB2b2NhYktleTpzdHJpbmcsIHZvY2FiSW5kZXg6bnVtYmVyICl7XG4gICAgICAgIHRoaXMuc2VsZWN0ZWRWb2NhYktleSA9IHZvY2FiS2V5O1xuICAgICAgICB0aGlzLnNlbGVjdGVkVm9jYWJJbmRleCA9IHZvY2FiSW5kZXg7XG4gICAgICAgIFxuICAgICAgICBpZiggdGhpcy5ib3R0b21UZXh0ICl7XG4gICAgICAgICAgICBjb25zdCB2b2NhYjpWb2NhYiB8IHVuZGVmaW5lZCA9IERlY2tSZXBvLmdldFZvY2FiKHRoaXMuc2VsZWN0ZWREZWNrS2V5LHRoaXMuc2VsZWN0ZWRWb2NhYktleSk7XG4gICAgICAgICAgICBpZiggdm9jYWIgIT0gdW5kZWZpbmVkICl7XG4gICAgICAgICAgICAgICAgdGhpcy5ib3R0b21UZXh0LnNldFRleHQodm9jYWIubmFtZSk7XG4gICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICB0aGlzLmJvdHRvbVRleHQuc2V0VGV4dCgnJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiggdGhpcy5zZWxlY3RlZERlY2tLZXkgKXtcbiAgICAgICAgICAgIHRoaXMuYm90dG9tQnV0dG9uQ29uZmlybS5zZXREaXNhYmxlZCggZmFsc2UgKTtcbiAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICB0aGlzLmJvdHRvbUJ1dHRvbkNvbmZpcm0uc2V0RGlzYWJsZWQoIHRydWUgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMudXBkYXRlVm9jYWJDYXJkcygpO1xuICAgIH1cblxuICAgIHJlbmRlclZvY2Ficygpe1xuICAgICAgICAvLyBDbGVhclxuICAgICAgICBsZXQgY2hpbGRyZW4gPSB0aGlzLmlubmVyQ29udGFpbmVyLmdldEFsbCgpO1xuICAgICAgICBjaGlsZHJlbi5mb3JFYWNoKCAoY2hpbGQpPT57XG4gICAgICAgICAgICBjaGlsZC5kZXN0cm95KCk7XG4gICAgICAgIH0pXG4gICAgICAgIC8vIFJlbmRlciBEZWNrXG4gICAgICAgIGNvbnN0IGRlY2s6RGVjayB8IHVuZGVmaW5lZCA9IERlY2tSZXBvLmdldERlY2sodGhpcy5zZWxlY3RlZERlY2tLZXkpO1xuICAgICAgICBcbiAgICAgICAgaWYoIGRlY2sgIT0gdW5kZWZpbmVkICl7XG4gICAgICAgICAgICAvLyBDYWxjdWxhdGUgd2l0aCBjb25zaWRlciB0byBhZGQgaW50byBpbm5lciBjb250YWluZXJcbiAgICAgICAgICAgIGNvbnN0IHN0YXJ0WDogbnVtYmVyID0gLSh0aGlzLnZvY2FiR2FwWCoodGhpcy52b2NhYlBlclJvdy0xKS8yKTtcbiAgICAgICAgICAgIGNvbnN0IHN0YXJ0WTogbnVtYmVyID0gLSh0aGlzLmlubmVyUGFuZWxIZWlnaHQvMiAtIHRoaXMucGFuZWxQYWRkaW5nIC0gKHRoaXMudm9jYWJTaXplSGVpZ2h0LzIpICk7XG4gICAgICAgICAgICBkZWNrLnZvY2Ficy5mb3JFYWNoKCh2b2NhYixpbmRleCkgPT4ge1xuICAgICAgICAgICAgICAgIGxldCByb3cgPSBQaGFzZXIuTWF0aC5GbG9vclRvKGluZGV4L3RoaXMudm9jYWJQZXJSb3cpOyAvLyBSb3cgMCAsIDFcbiAgICAgICAgICAgICAgICBsZXQgcmVtYWluZGVyID0gaW5kZXgldGhpcy52b2NhYlBlclJvdztcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBsZXQgcG9zWDogbnVtYmVyID0gc3RhcnRYICsgKHRoaXMudm9jYWJHYXBYKnJlbWFpbmRlcik7XG4gICAgICAgICAgICAgICAgbGV0IHBvc1k6IG51bWJlciA9IHN0YXJ0WSArICh0aGlzLnZvY2FiR2FwWSpyb3cpO1xuXG4gICAgICAgICAgICAgICAgLy8gbGV0IHZvY2FiU3ByaXRlOkdhbWVPYmplY3RzLlNwcml0ZSA9IHRoaXMuc2NlbmUuYWRkLnNwcml0ZShwb3NYLHBvc1ksJ3ZvY2FiQ2FyZEJhc2UnKTtcbiAgICAgICAgICAgICAgICAvLyB2b2NhYlNwcml0ZS5zZXREaXNwbGF5U2l6ZSh0aGlzLnZvY2FiU2l6ZVdpZHRoLHRoaXMudm9jYWJTaXplSGVpZ2h0KTtcbiAgICAgICAgICAgICAgICBsZXQgdm9jYWJDYXJkOlZvY2FiQ2FyZCA9IG5ldyBWb2NhYkNhcmQoXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2NlbmUsXG4gICAgICAgICAgICAgICAgICAgIHBvc1gsXG4gICAgICAgICAgICAgICAgICAgIHBvc1ksXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudm9jYWJTaXplV2lkdGgsXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudm9jYWJTaXplSGVpZ2h0LFxuICAgICAgICAgICAgICAgICAgICB2b2NhYlxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgdm9jYWJDYXJkLm9uUHJlc3NDYWxsYmFjayA9ICgpPT57XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0Vm9jYWJDYXJkKHZvY2FiLmtleSwgaW5kZXgpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRoaXMudm9jYWJDYXJkcy5wdXNoKHZvY2FiQ2FyZCk7XG4gICAgICAgICAgICAgICAgdGhpcy5pbm5lckNvbnRhaW5lci5hZGQodm9jYWJDYXJkLmNvbnRhaW5lcik7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYoICF0aGlzLnNlbGVjdGVkVm9jYWJLZXkgJiYgIXRoaXMuc2VsZWN0ZWRWb2NhYkluZGV4KXtcbiAgICAgICAgICAgICAgICBpZiggZGVjay52b2NhYnNbMF0gIT0gdW5kZWZpbmVkICl7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0Vm9jYWJDYXJkKGRlY2sudm9jYWJzWzBdLmtleSwwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICBpZiggZGVjay52b2NhYnNbdGhpcy5zZWxlY3RlZFZvY2FiSW5kZXhdICE9IHVuZGVmaW5lZCApe1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdFZvY2FiQ2FyZChkZWNrLnZvY2Fic1t0aGlzLnNlbGVjdGVkVm9jYWJJbmRleF0ua2V5LHRoaXMuc2VsZWN0ZWRWb2NhYkluZGV4KTtcbiAgICAgICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZFZvY2FiS2V5ID0gJyc7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYm90dG9tQnV0dG9uQ29uZmlybS5zZXREaXNhYmxlZCggdHJ1ZSApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIG9wZW4oKXtcbiAgICAgICAgdGhpcy5jb250YWluZXIuc2V0VmlzaWJsZSh0cnVlKTtcbiAgICAgICAgaWYoIHRoaXMub25QYW5lbE9wZW4gKSB0aGlzLm9uUGFuZWxPcGVuKCk7XG4gICAgfVxuXG4gICAgY2xvc2UoKXtcbiAgICAgICAgdGhpcy5jb250YWluZXIuc2V0VmlzaWJsZShmYWxzZSk7XG4gICAgICAgIGlmKCB0aGlzLm9uUGFuZWxDbG9zZSApIHRoaXMub25QYW5lbENsb3NlKCk7XG4gICAgfVxufSJdLCJuYW1lcyI6WyJDbG9zZUJ1dHRvbiIsIkdhbWVMaWIiLCJEZWNrUmVwbyIsIlRhYkJ1dHRvbkRlY2siLCJWb2NhYkNhcmQiLCJCYXNpY0J1dHRvbiIsInBhbmVsU2VsZWN0ZWRDYXJkIiwicHJlbG9hZCIsInNjZW5lIiwicmVuZGVyRGVja1RhYnMiLCJkZWNrcyIsInRvcExlZnRQb3MiLCJwYW5lbCIsImdldFRvcExlZnQiLCJyb3dZIiwieSIsImRlY2tCdXR0b25TZWN0aW9uRGlmZlkiLCJkZWNrQnV0dG9uR2FwIiwic3RhcnRYIiwieCIsInBhbmVsUGFkZGluZyIsImZvckVhY2giLCJkZWNrIiwiaW5kZXgiLCJyb3ciLCJQaGFzZXIiLCJNYXRoIiwiRmxvb3JUbyIsImRlY2tCdXR0b25QZXJSb3ciLCJyZW1haW5kZXIiLCJwb3NYIiwicG9zWSIsInRhYkJ1dHRvbiIsInRhYkJ1dHRvblNpemUiLCJvblByZXNzQ2FsbGJhY2siLCJzZWxlY3REZWNrVGFiIiwia2V5IiwiY29udGFpbmVyIiwiYWRkIiwidGFiQnV0dG9ucyIsInB1c2giLCJ1cGRhdGVEZWNrVGFicyIsInRhYiIsInNlbGVjdGVkRGVja0tleSIsInNldFN0YXR1cyIsInVwZGF0ZVZvY2FiQ2FyZHMiLCJ2b2NhYkNhcmRzIiwiY2FyZCIsInZvY2FiIiwic2VsZWN0ZWRWb2NhYktleSIsInNldEJ1dHRvblN0YXRlIiwiZGVja0tleSIsInJlbmRlclZvY2FicyIsInNlbGVjdFZvY2FiQ2FyZCIsInZvY2FiS2V5Iiwidm9jYWJJbmRleCIsInNlbGVjdGVkVm9jYWJJbmRleCIsImJvdHRvbVRleHQiLCJnZXRWb2NhYiIsInVuZGVmaW5lZCIsInNldFRleHQiLCJuYW1lIiwiYm90dG9tQnV0dG9uQ29uZmlybSIsInNldERpc2FibGVkIiwiY2hpbGRyZW4iLCJpbm5lckNvbnRhaW5lciIsImdldEFsbCIsImNoaWxkIiwiZGVzdHJveSIsImdldERlY2siLCJ2b2NhYkdhcFgiLCJ2b2NhYlBlclJvdyIsInN0YXJ0WSIsImlubmVyUGFuZWxIZWlnaHQiLCJ2b2NhYlNpemVIZWlnaHQiLCJ2b2NhYnMiLCJ2b2NhYkdhcFkiLCJ2b2NhYkNhcmQiLCJ2b2NhYlNpemVXaWR0aCIsIm9wZW4iLCJzZXRWaXNpYmxlIiwib25QYW5lbE9wZW4iLCJjbG9zZSIsIm9uUGFuZWxDbG9zZSIsImNvbnN0cnVjdG9yIiwicGFuZWxXaWR0aCIsInNjcmVlbldpZHRoIiwiY2xvc2VCdXR0b25TaXplIiwidm9jYWJSb3ciLCJib3R0b21UZXh0SGVpZ2h0Iiwic2NyZWVuSGVpZ2h0Iiwic2V0RGVwdGgiLCJiYWNrZHJvcCIsInJlY3RhbmdsZSIsImdldERlY2tzIiwiZGVja0J1dHRvblJvdyIsImxlbmd0aCIsInRvdGFsSGVpZ2h0Iiwidm9jYWJTZWN0aW9uRGlmZlkiLCJwYW5lbEhlaWdodCIsImNvbG9yUGFuZWxCZyIsInRvcFJpZ2h0UG9zIiwiZ2V0VG9wUmlnaHQiLCJjbG9zZUJ1dHRvblgiLCJjbG9zZUJ1dHRvblkiLCJjbG9zZUJ1dHRvbiIsImJ1dHRvblNwcml0ZSIsImRpc3BsYXlIZWlnaHQiLCJkaXNwbGF5V2lkdGgiLCJvblByZXNzZWQiLCJyZWxhdGl2ZUlubmVyUGFuZWxZIiwiaW5uZXJQYW5lbFdpZHRoIiwiaW5uZXJQYW5lbCIsImNvbG9yUGFuZWxCZ0RhcmsiLCJib3R0b21MZWZ0IiwiZ2V0Qm90dG9tTGVmdCIsInRleHQiLCJmb250U2l6ZSIsImZvbnRGYW1pbHkiLCJjb2xvciIsInNldE9yaWdpbiIsImJvdHRvbVJpZ2h0IiwiZ2V0Qm90dG9tUmlnaHQiLCJnZXRXaWR0aCIsIm9uUHJlc3NlZENhbGxiYWNrIiwib25DYXJkU2VsZWN0ZWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/game/components/PanelSelectCard/PanelSelectCard.ts\n"));

/***/ })

});